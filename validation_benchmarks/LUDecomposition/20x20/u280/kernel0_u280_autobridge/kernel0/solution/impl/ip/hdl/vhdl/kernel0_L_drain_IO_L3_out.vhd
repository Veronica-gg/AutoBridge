-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0_L_drain_IO_L3_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_L_AWVALID : OUT STD_LOGIC;
    m_axi_L_AWREADY : IN STD_LOGIC;
    m_axi_L_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_L_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_L_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_L_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_L_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_L_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_L_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_L_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_L_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_L_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_L_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_L_WVALID : OUT STD_LOGIC;
    m_axi_L_WREADY : IN STD_LOGIC;
    m_axi_L_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_L_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_L_WLAST : OUT STD_LOGIC;
    m_axi_L_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_L_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_L_ARVALID : OUT STD_LOGIC;
    m_axi_L_ARREADY : IN STD_LOGIC;
    m_axi_L_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_L_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_L_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_L_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_L_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_L_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_L_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_L_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_L_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_L_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_L_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_L_RVALID : IN STD_LOGIC;
    m_axi_L_RREADY : OUT STD_LOGIC;
    m_axi_L_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_L_RLAST : IN STD_LOGIC;
    m_axi_L_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_L_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_L_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_L_BVALID : IN STD_LOGIC;
    m_axi_L_BREADY : OUT STD_LOGIC;
    m_axi_L_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_L_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_L_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    L_offset_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    L_offset_empty_n : IN STD_LOGIC;
    L_offset_read : OUT STD_LOGIC;
    fifo_L_drain_local_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_L_drain_local_in_V_empty_n : IN STD_LOGIC;
    fifo_L_drain_local_in_V_read : OUT STD_LOGIC );
end;


architecture behav of kernel0_L_drain_IO_L3_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal L_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln557_reg_254 : STD_LOGIC_VECTOR (0 downto 0);
    signal L_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln557_reg_254_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal L_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln557_reg_254_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal L_offset_blk_n : STD_LOGIC;
    signal fifo_L_drain_local_in_V_blk_n : STD_LOGIC;
    signal p_065_0_in_i_reg_117 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln548_cast_i_fu_136_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln548_cast_i_reg_225 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln555_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c0_V_fu_146_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c0_V_reg_234 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln555_fu_152_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_i_fu_156_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_i_reg_244 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln214_fu_172_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln214_reg_249 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln557_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln557_reg_254_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln557_reg_254_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln557_reg_254_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln557_reg_254_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c1_V_fu_182_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal c1_V_reg_258 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal L_addr_reg_263 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1751_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal p_094_0_i_reg_106 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_phi_mux_p_065_0_in_i_phi_fu_120_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln565_1_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_126_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln1352_1_i_fu_164_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1353_fu_188_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1353_fu_192_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1353_1_fu_197_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_201_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln565_fu_206_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln565_fu_210_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln555_fu_140_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln555_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((icmp_ln555_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_065_0_in_i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln555_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_065_0_in_i_reg_117 <= zext_ln555_fu_152_p1;
            elsif (((icmp_ln557_reg_254 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_065_0_in_i_reg_117 <= c1_V_reg_258;
            end if; 
        end if;
    end process;

    p_094_0_i_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_094_0_i_reg_106 <= c0_V_reg_234;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = L_offset_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_094_0_i_reg_106 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln557_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    L_addr_reg_263(62 downto 0) <= zext_ln565_1_fu_215_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c0_V_reg_234 <= c0_V_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln557_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                c1_V_reg_258 <= c1_V_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln557_reg_254 <= icmp_ln557_fu_176_p2;
                icmp_ln557_reg_254_pp0_iter1_reg <= icmp_ln557_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln557_reg_254_pp0_iter2_reg <= icmp_ln557_reg_254_pp0_iter1_reg;
                icmp_ln557_reg_254_pp0_iter3_reg <= icmp_ln557_reg_254_pp0_iter2_reg;
                icmp_ln557_reg_254_pp0_iter4_reg <= icmp_ln557_reg_254_pp0_iter3_reg;
                icmp_ln557_reg_254_pp0_iter5_reg <= icmp_ln557_reg_254_pp0_iter4_reg;
                icmp_ln557_reg_254_pp0_iter6_reg <= icmp_ln557_reg_254_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln555_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_i_reg_244(8 downto 4) <= shl_ln_i_fu_156_p3(8 downto 4);
                    zext_ln214_reg_249(6 downto 2) <= zext_ln214_fu_172_p1(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln557_reg_254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1751_reg_269 <= fifo_L_drain_local_in_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = L_offset_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln548_cast_i_reg_225(61 downto 0) <= zext_ln548_cast_i_fu_136_p1(61 downto 0);
            end if;
        end if;
    end process;
    zext_ln548_cast_i_reg_225(62) <= '0';
    shl_ln_i_reg_244(3 downto 0) <= "0000";
    zext_ln214_reg_249(1 downto 0) <= "00";
    zext_ln214_reg_249(7) <= '0';
    L_addr_reg_263(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, L_offset_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, icmp_ln555_fu_140_p2, ap_CS_fsm_state2, icmp_ln557_fu_176_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = L_offset_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln555_fu_140_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln557_fu_176_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln557_fu_176_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    L_blk_n_AW_assign_proc : process(m_axi_L_AWREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln557_reg_254)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln557_reg_254 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_blk_n_AW <= m_axi_L_AWREADY;
        else 
            L_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    L_blk_n_B_assign_proc : process(m_axi_L_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, icmp_ln557_reg_254_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln557_reg_254_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            L_blk_n_B <= m_axi_L_BVALID;
        else 
            L_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    L_blk_n_W_assign_proc : process(m_axi_L_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln557_reg_254_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln557_reg_254_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            L_blk_n_W <= m_axi_L_WREADY;
        else 
            L_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    L_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, L_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            L_offset_blk_n <= L_offset_empty_n;
        else 
            L_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    L_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, L_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = L_offset_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            L_offset_read <= ap_const_logic_1;
        else 
            L_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1353_fu_192_p2 <= std_logic_vector(unsigned(zext_ln1353_fu_188_p1) + unsigned(zext_ln214_reg_249));
    add_ln565_fu_210_p2 <= std_logic_vector(unsigned(zext_ln548_cast_i_reg_225) + unsigned(zext_ln565_fu_206_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_L_BVALID, fifo_L_drain_local_in_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln557_reg_254, ap_enable_reg_pp0_iter7, icmp_ln557_reg_254_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln557_reg_254 = ap_const_lv1_0) and (fifo_L_drain_local_in_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln557_reg_254_pp0_iter6_reg = ap_const_lv1_0) and (m_axi_L_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_L_BVALID, fifo_L_drain_local_in_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln557_reg_254, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, icmp_ln557_reg_254_pp0_iter6_reg, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln557_reg_254 = ap_const_lv1_0) and (fifo_L_drain_local_in_V_empty_n = ap_const_logic_0)))) or ((icmp_ln557_reg_254_pp0_iter6_reg = ap_const_lv1_0) and (m_axi_L_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_L_BVALID, fifo_L_drain_local_in_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln557_reg_254, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, icmp_ln557_reg_254_pp0_iter6_reg, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln557_reg_254 = ap_const_lv1_0) and (fifo_L_drain_local_in_V_empty_n = ap_const_logic_0)))) or ((icmp_ln557_reg_254_pp0_iter6_reg = ap_const_lv1_0) and (m_axi_L_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, L_offset_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = L_offset_empty_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter7_assign_proc : process(m_axi_L_BVALID, icmp_ln557_reg_254_pp0_iter6_reg)
    begin
                ap_block_state10_pp0_stage0_iter7 <= ((icmp_ln557_reg_254_pp0_iter6_reg = ap_const_lv1_0) and (m_axi_L_BVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_L_AWREADY, icmp_ln557_reg_254)
    begin
                ap_block_state4_io <= ((icmp_ln557_reg_254 = ap_const_lv1_0) and (m_axi_L_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(fifo_L_drain_local_in_V_empty_n, icmp_ln557_reg_254)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln557_reg_254 = ap_const_lv1_0) and (fifo_L_drain_local_in_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(m_axi_L_WREADY, icmp_ln557_reg_254_pp0_iter1_reg)
    begin
                ap_block_state5_io <= ((icmp_ln557_reg_254_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_L_WREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln557_fu_176_p2)
    begin
        if ((icmp_ln557_fu_176_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln555_fu_140_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln555_fu_140_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_065_0_in_i_phi_fu_120_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln557_reg_254, p_065_0_in_i_reg_117, c1_V_reg_258)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln557_reg_254 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_p_065_0_in_i_phi_fu_120_p4 <= c1_V_reg_258;
        else 
            ap_phi_mux_p_065_0_in_i_phi_fu_120_p4 <= p_065_0_in_i_reg_117;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln555_fu_140_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln555_fu_140_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c0_V_fu_146_p2 <= std_logic_vector(unsigned(p_094_0_i_reg_106) + unsigned(ap_const_lv5_1));
    c1_V_fu_182_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_065_0_in_i_phi_fu_120_p4) + unsigned(ap_const_lv6_1));

    fifo_L_drain_local_in_V_blk_n_assign_proc : process(fifo_L_drain_local_in_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln557_reg_254)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln557_reg_254 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_L_drain_local_in_V_blk_n <= fifo_L_drain_local_in_V_empty_n;
        else 
            fifo_L_drain_local_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_L_drain_local_in_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln557_reg_254, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln557_reg_254 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_L_drain_local_in_V_read <= ap_const_logic_1;
        else 
            fifo_L_drain_local_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln555_fu_140_p2 <= "1" when (p_094_0_i_reg_106 = ap_const_lv5_13) else "0";
    icmp_ln557_fu_176_p2 <= "1" when (ap_phi_mux_p_065_0_in_i_phi_fu_120_p4 = ap_const_lv6_13) else "0";
    m_axi_L_ARADDR <= ap_const_lv64_0;
    m_axi_L_ARBURST <= ap_const_lv2_0;
    m_axi_L_ARCACHE <= ap_const_lv4_0;
    m_axi_L_ARID <= ap_const_lv1_0;
    m_axi_L_ARLEN <= ap_const_lv32_0;
    m_axi_L_ARLOCK <= ap_const_lv2_0;
    m_axi_L_ARPROT <= ap_const_lv3_0;
    m_axi_L_ARQOS <= ap_const_lv4_0;
    m_axi_L_ARREGION <= ap_const_lv4_0;
    m_axi_L_ARSIZE <= ap_const_lv3_0;
    m_axi_L_ARUSER <= ap_const_lv1_0;
    m_axi_L_ARVALID <= ap_const_logic_0;
    m_axi_L_AWADDR <= L_addr_reg_263;
    m_axi_L_AWBURST <= ap_const_lv2_0;
    m_axi_L_AWCACHE <= ap_const_lv4_0;
    m_axi_L_AWID <= ap_const_lv1_0;
    m_axi_L_AWLEN <= ap_const_lv32_1;
    m_axi_L_AWLOCK <= ap_const_lv2_0;
    m_axi_L_AWPROT <= ap_const_lv3_0;
    m_axi_L_AWQOS <= ap_const_lv4_0;
    m_axi_L_AWREGION <= ap_const_lv4_0;
    m_axi_L_AWSIZE <= ap_const_lv3_0;
    m_axi_L_AWUSER <= ap_const_lv1_0;

    m_axi_L_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln557_reg_254, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln557_reg_254 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_L_AWVALID <= ap_const_logic_1;
        else 
            m_axi_L_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_L_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln557_reg_254_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln557_reg_254_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_L_BREADY <= ap_const_logic_1;
        else 
            m_axi_L_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_L_RREADY <= ap_const_logic_0;
    m_axi_L_WDATA <= tmp_1751_reg_269;
    m_axi_L_WID <= ap_const_lv1_0;
    m_axi_L_WLAST <= ap_const_logic_0;
    m_axi_L_WSTRB <= ap_const_lv4_F;
    m_axi_L_WUSER <= ap_const_lv1_0;

    m_axi_L_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln557_reg_254_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln557_reg_254_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_L_WVALID <= ap_const_logic_1;
        else 
            m_axi_L_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_201_p2 <= std_logic_vector(unsigned(shl_ln_i_reg_244) + unsigned(zext_ln1353_1_fu_197_p1));
    shl_ln1352_1_i_fu_164_p3 <= (p_094_0_i_reg_106 & ap_const_lv2_0);
    shl_ln_i_fu_156_p3 <= (p_094_0_i_reg_106 & ap_const_lv4_0);
    tmp_fu_126_p4 <= L_offset_dout(63 downto 2);
    zext_ln1353_1_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_192_p2),9));
    zext_ln1353_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c1_V_fu_182_p2),8));
    zext_ln214_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1352_1_i_fu_164_p3),8));
    zext_ln548_cast_i_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_126_p4),63));
    zext_ln555_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_094_0_i_reg_106),6));
    zext_ln565_1_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln565_fu_210_p2),64));
    zext_ln565_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_201_p2),63));
end behav;
