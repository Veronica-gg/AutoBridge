// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel0_L_drain_IO_L3_out_HH_
#define _kernel0_L_drain_IO_L3_out_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct kernel0_L_drain_IO_L3_out : public sc_module {
    // Port declarations 58
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_L_AWVALID;
    sc_in< sc_logic > m_axi_L_AWREADY;
    sc_out< sc_lv<64> > m_axi_L_AWADDR;
    sc_out< sc_lv<1> > m_axi_L_AWID;
    sc_out< sc_lv<32> > m_axi_L_AWLEN;
    sc_out< sc_lv<3> > m_axi_L_AWSIZE;
    sc_out< sc_lv<2> > m_axi_L_AWBURST;
    sc_out< sc_lv<2> > m_axi_L_AWLOCK;
    sc_out< sc_lv<4> > m_axi_L_AWCACHE;
    sc_out< sc_lv<3> > m_axi_L_AWPROT;
    sc_out< sc_lv<4> > m_axi_L_AWQOS;
    sc_out< sc_lv<4> > m_axi_L_AWREGION;
    sc_out< sc_lv<1> > m_axi_L_AWUSER;
    sc_out< sc_logic > m_axi_L_WVALID;
    sc_in< sc_logic > m_axi_L_WREADY;
    sc_out< sc_lv<32> > m_axi_L_WDATA;
    sc_out< sc_lv<4> > m_axi_L_WSTRB;
    sc_out< sc_logic > m_axi_L_WLAST;
    sc_out< sc_lv<1> > m_axi_L_WID;
    sc_out< sc_lv<1> > m_axi_L_WUSER;
    sc_out< sc_logic > m_axi_L_ARVALID;
    sc_in< sc_logic > m_axi_L_ARREADY;
    sc_out< sc_lv<64> > m_axi_L_ARADDR;
    sc_out< sc_lv<1> > m_axi_L_ARID;
    sc_out< sc_lv<32> > m_axi_L_ARLEN;
    sc_out< sc_lv<3> > m_axi_L_ARSIZE;
    sc_out< sc_lv<2> > m_axi_L_ARBURST;
    sc_out< sc_lv<2> > m_axi_L_ARLOCK;
    sc_out< sc_lv<4> > m_axi_L_ARCACHE;
    sc_out< sc_lv<3> > m_axi_L_ARPROT;
    sc_out< sc_lv<4> > m_axi_L_ARQOS;
    sc_out< sc_lv<4> > m_axi_L_ARREGION;
    sc_out< sc_lv<1> > m_axi_L_ARUSER;
    sc_in< sc_logic > m_axi_L_RVALID;
    sc_out< sc_logic > m_axi_L_RREADY;
    sc_in< sc_lv<32> > m_axi_L_RDATA;
    sc_in< sc_logic > m_axi_L_RLAST;
    sc_in< sc_lv<1> > m_axi_L_RID;
    sc_in< sc_lv<1> > m_axi_L_RUSER;
    sc_in< sc_lv<2> > m_axi_L_RRESP;
    sc_in< sc_logic > m_axi_L_BVALID;
    sc_out< sc_logic > m_axi_L_BREADY;
    sc_in< sc_lv<2> > m_axi_L_BRESP;
    sc_in< sc_lv<1> > m_axi_L_BID;
    sc_in< sc_lv<1> > m_axi_L_BUSER;
    sc_in< sc_lv<64> > L_offset_dout;
    sc_in< sc_logic > L_offset_empty_n;
    sc_out< sc_logic > L_offset_read;
    sc_in< sc_lv<32> > fifo_L_drain_local_in_V_dout;
    sc_in< sc_logic > fifo_L_drain_local_in_V_empty_n;
    sc_out< sc_logic > fifo_L_drain_local_in_V_read;


    // Module declarations
    kernel0_L_drain_IO_L3_out(sc_module_name name);
    SC_HAS_PROCESS(kernel0_L_drain_IO_L3_out);

    ~kernel0_L_drain_IO_L3_out();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > L_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln557_reg_254;
    sc_signal< sc_logic > L_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln557_reg_254_pp0_iter1_reg;
    sc_signal< sc_logic > L_blk_n_B;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_lv<1> > icmp_ln557_reg_254_pp0_iter6_reg;
    sc_signal< sc_logic > L_offset_blk_n;
    sc_signal< sc_logic > fifo_L_drain_local_in_V_blk_n;
    sc_signal< sc_lv<6> > p_065_0_in_i_reg_117;
    sc_signal< sc_lv<63> > zext_ln548_cast_i_fu_136_p1;
    sc_signal< sc_lv<63> > zext_ln548_cast_i_reg_225;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln555_fu_140_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > c0_V_fu_146_p2;
    sc_signal< sc_lv<5> > c0_V_reg_234;
    sc_signal< sc_lv<6> > zext_ln555_fu_152_p1;
    sc_signal< sc_lv<9> > shl_ln_i_fu_156_p3;
    sc_signal< sc_lv<9> > shl_ln_i_reg_244;
    sc_signal< sc_lv<8> > zext_ln214_fu_172_p1;
    sc_signal< sc_lv<8> > zext_ln214_reg_249;
    sc_signal< sc_lv<1> > icmp_ln557_fu_176_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter7;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln557_reg_254_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln557_reg_254_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln557_reg_254_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln557_reg_254_pp0_iter5_reg;
    sc_signal< sc_lv<6> > c1_V_fu_182_p2;
    sc_signal< sc_lv<6> > c1_V_reg_258;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > L_addr_reg_263;
    sc_signal< sc_lv<32> > tmp_1751_reg_269;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_lv<5> > p_094_0_i_reg_106;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<6> > ap_phi_mux_p_065_0_in_i_phi_fu_120_p4;
    sc_signal< sc_lv<64> > zext_ln565_1_fu_215_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<62> > tmp_fu_126_p4;
    sc_signal< sc_lv<7> > shl_ln1352_1_i_fu_164_p3;
    sc_signal< sc_lv<8> > zext_ln1353_fu_188_p1;
    sc_signal< sc_lv<8> > add_ln1353_fu_192_p2;
    sc_signal< sc_lv<9> > zext_ln1353_1_fu_197_p1;
    sc_signal< sc_lv<9> > ret_V_fu_201_p2;
    sc_signal< sc_lv<63> > zext_ln565_fu_206_p1;
    sc_signal< sc_lv<63> > add_ln565_fu_210_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<5> ap_const_lv5_13;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<6> ap_const_lv6_13;
    static const sc_lv<6> ap_const_lv6_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_L_blk_n_AW();
    void thread_L_blk_n_B();
    void thread_L_blk_n_W();
    void thread_L_offset_blk_n();
    void thread_L_offset_read();
    void thread_add_ln1353_fu_192_p2();
    void thread_add_ln565_fu_210_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage0_iter7();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_io();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_block_state6_pp0_stage0_iter3();
    void thread_ap_block_state7_pp0_stage0_iter4();
    void thread_ap_block_state8_pp0_stage0_iter5();
    void thread_ap_block_state9_pp0_stage0_iter6();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_p_065_0_in_i_phi_fu_120_p4();
    void thread_ap_ready();
    void thread_c0_V_fu_146_p2();
    void thread_c1_V_fu_182_p2();
    void thread_fifo_L_drain_local_in_V_blk_n();
    void thread_fifo_L_drain_local_in_V_read();
    void thread_icmp_ln555_fu_140_p2();
    void thread_icmp_ln557_fu_176_p2();
    void thread_m_axi_L_ARADDR();
    void thread_m_axi_L_ARBURST();
    void thread_m_axi_L_ARCACHE();
    void thread_m_axi_L_ARID();
    void thread_m_axi_L_ARLEN();
    void thread_m_axi_L_ARLOCK();
    void thread_m_axi_L_ARPROT();
    void thread_m_axi_L_ARQOS();
    void thread_m_axi_L_ARREGION();
    void thread_m_axi_L_ARSIZE();
    void thread_m_axi_L_ARUSER();
    void thread_m_axi_L_ARVALID();
    void thread_m_axi_L_AWADDR();
    void thread_m_axi_L_AWBURST();
    void thread_m_axi_L_AWCACHE();
    void thread_m_axi_L_AWID();
    void thread_m_axi_L_AWLEN();
    void thread_m_axi_L_AWLOCK();
    void thread_m_axi_L_AWPROT();
    void thread_m_axi_L_AWQOS();
    void thread_m_axi_L_AWREGION();
    void thread_m_axi_L_AWSIZE();
    void thread_m_axi_L_AWUSER();
    void thread_m_axi_L_AWVALID();
    void thread_m_axi_L_BREADY();
    void thread_m_axi_L_RREADY();
    void thread_m_axi_L_WDATA();
    void thread_m_axi_L_WID();
    void thread_m_axi_L_WLAST();
    void thread_m_axi_L_WSTRB();
    void thread_m_axi_L_WUSER();
    void thread_m_axi_L_WVALID();
    void thread_ret_V_fu_201_p2();
    void thread_shl_ln1352_1_i_fu_164_p3();
    void thread_shl_ln_i_fu_156_p3();
    void thread_tmp_fu_126_p4();
    void thread_zext_ln1353_1_fu_197_p1();
    void thread_zext_ln1353_fu_188_p1();
    void thread_zext_ln214_fu_172_p1();
    void thread_zext_ln548_cast_i_fu_136_p1();
    void thread_zext_ln555_fu_152_p1();
    void thread_zext_ln565_1_fu_215_p1();
    void thread_zext_ln565_fu_206_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
