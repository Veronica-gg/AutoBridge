-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0_PE_wrapper_19_19_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_V_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_V_in_V_empty_n : IN STD_LOGIC;
    fifo_V_in_V_read : OUT STD_LOGIC;
    fifo_U_drain_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifo_U_drain_out_V_full_n : IN STD_LOGIC;
    fifo_U_drain_out_V_write : OUT STD_LOGIC );
end;


architecture behav of kernel0_PE_wrapper_19_19_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n : STD_LOGIC;
    signal fifo_V_in_V_blk_n : STD_LOGIC;
    signal call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n : STD_LOGIC;
    signal fifo_U_drain_out_V_blk_n : STD_LOGIC;
    signal call_ln356_PE_19_19_s_fu_18_ap_start : STD_LOGIC;
    signal call_ln356_PE_19_19_s_fu_18_ap_done : STD_LOGIC;
    signal call_ln356_PE_19_19_s_fu_18_ap_idle : STD_LOGIC;
    signal call_ln356_PE_19_19_s_fu_18_ap_ready : STD_LOGIC;
    signal call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_read : STD_LOGIC;
    signal call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_write : STD_LOGIC;
    signal ap_block_state1_ignore_call2 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component kernel0_PE_19_19_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_V_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifo_V_in_V_empty_n : IN STD_LOGIC;
        fifo_V_in_V_read : OUT STD_LOGIC;
        fifo_U_drain_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifo_U_drain_out_V_full_n : IN STD_LOGIC;
        fifo_U_drain_out_V_write : OUT STD_LOGIC;
        fifo_V_in_V_blk_n : OUT STD_LOGIC;
        fifo_U_drain_out_V_blk_n : OUT STD_LOGIC );
    end component;



begin
    call_ln356_PE_19_19_s_fu_18 : component kernel0_PE_19_19_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ln356_PE_19_19_s_fu_18_ap_start,
        ap_done => call_ln356_PE_19_19_s_fu_18_ap_done,
        ap_idle => call_ln356_PE_19_19_s_fu_18_ap_idle,
        ap_ready => call_ln356_PE_19_19_s_fu_18_ap_ready,
        fifo_V_in_V_dout => fifo_V_in_V_dout,
        fifo_V_in_V_empty_n => fifo_V_in_V_empty_n,
        fifo_V_in_V_read => call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_read,
        fifo_U_drain_out_V_din => call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_din,
        fifo_U_drain_out_V_full_n => fifo_U_drain_out_V_full_n,
        fifo_U_drain_out_V_write => call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_write,
        fifo_V_in_V_blk_n => call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n,
        fifo_U_drain_out_V_blk_n => call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n = ap_const_logic_0) or (call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n, call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n, call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n = ap_const_logic_0) or (call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call2_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call2 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n, call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n = ap_const_logic_0) or (call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n, call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n = ap_const_logic_0) or (call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    call_ln356_PE_19_19_s_fu_18_ap_start_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            call_ln356_PE_19_19_s_fu_18_ap_start <= ap_const_logic_1;
        else 
            call_ln356_PE_19_19_s_fu_18_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    fifo_U_drain_out_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fifo_U_drain_out_V_blk_n <= call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_blk_n;
        else 
            fifo_U_drain_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_U_drain_out_V_din <= call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_din;

    fifo_U_drain_out_V_write_assign_proc : process(ap_CS_fsm_state1, call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_write)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fifo_U_drain_out_V_write <= call_ln356_PE_19_19_s_fu_18_fifo_U_drain_out_V_write;
        else 
            fifo_U_drain_out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_V_in_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fifo_V_in_V_blk_n <= call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_blk_n;
        else 
            fifo_V_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_V_in_V_read_assign_proc : process(ap_CS_fsm_state1, call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fifo_V_in_V_read <= call_ln356_PE_19_19_s_fu_18_fifo_V_in_V_read;
        else 
            fifo_V_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
