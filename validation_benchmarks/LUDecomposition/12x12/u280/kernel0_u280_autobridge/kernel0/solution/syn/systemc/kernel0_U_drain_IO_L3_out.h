// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel0_U_drain_IO_L3_out_HH_
#define _kernel0_U_drain_IO_L3_out_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct kernel0_U_drain_IO_L3_out : public sc_module {
    // Port declarations 58
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_U_AWVALID;
    sc_in< sc_logic > m_axi_U_AWREADY;
    sc_out< sc_lv<64> > m_axi_U_AWADDR;
    sc_out< sc_lv<1> > m_axi_U_AWID;
    sc_out< sc_lv<32> > m_axi_U_AWLEN;
    sc_out< sc_lv<3> > m_axi_U_AWSIZE;
    sc_out< sc_lv<2> > m_axi_U_AWBURST;
    sc_out< sc_lv<2> > m_axi_U_AWLOCK;
    sc_out< sc_lv<4> > m_axi_U_AWCACHE;
    sc_out< sc_lv<3> > m_axi_U_AWPROT;
    sc_out< sc_lv<4> > m_axi_U_AWQOS;
    sc_out< sc_lv<4> > m_axi_U_AWREGION;
    sc_out< sc_lv<1> > m_axi_U_AWUSER;
    sc_out< sc_logic > m_axi_U_WVALID;
    sc_in< sc_logic > m_axi_U_WREADY;
    sc_out< sc_lv<32> > m_axi_U_WDATA;
    sc_out< sc_lv<4> > m_axi_U_WSTRB;
    sc_out< sc_logic > m_axi_U_WLAST;
    sc_out< sc_lv<1> > m_axi_U_WID;
    sc_out< sc_lv<1> > m_axi_U_WUSER;
    sc_out< sc_logic > m_axi_U_ARVALID;
    sc_in< sc_logic > m_axi_U_ARREADY;
    sc_out< sc_lv<64> > m_axi_U_ARADDR;
    sc_out< sc_lv<1> > m_axi_U_ARID;
    sc_out< sc_lv<32> > m_axi_U_ARLEN;
    sc_out< sc_lv<3> > m_axi_U_ARSIZE;
    sc_out< sc_lv<2> > m_axi_U_ARBURST;
    sc_out< sc_lv<2> > m_axi_U_ARLOCK;
    sc_out< sc_lv<4> > m_axi_U_ARCACHE;
    sc_out< sc_lv<3> > m_axi_U_ARPROT;
    sc_out< sc_lv<4> > m_axi_U_ARQOS;
    sc_out< sc_lv<4> > m_axi_U_ARREGION;
    sc_out< sc_lv<1> > m_axi_U_ARUSER;
    sc_in< sc_logic > m_axi_U_RVALID;
    sc_out< sc_logic > m_axi_U_RREADY;
    sc_in< sc_lv<32> > m_axi_U_RDATA;
    sc_in< sc_logic > m_axi_U_RLAST;
    sc_in< sc_lv<1> > m_axi_U_RID;
    sc_in< sc_lv<1> > m_axi_U_RUSER;
    sc_in< sc_lv<2> > m_axi_U_RRESP;
    sc_in< sc_logic > m_axi_U_BVALID;
    sc_out< sc_logic > m_axi_U_BREADY;
    sc_in< sc_lv<2> > m_axi_U_BRESP;
    sc_in< sc_lv<1> > m_axi_U_BID;
    sc_in< sc_lv<1> > m_axi_U_BUSER;
    sc_in< sc_lv<64> > U_offset_dout;
    sc_in< sc_logic > U_offset_empty_n;
    sc_out< sc_logic > U_offset_read;
    sc_in< sc_lv<32> > fifo_U_drain_local_in_V_dout;
    sc_in< sc_logic > fifo_U_drain_local_in_V_empty_n;
    sc_out< sc_logic > fifo_U_drain_local_in_V_read;


    // Module declarations
    kernel0_U_drain_IO_L3_out(sc_module_name name);
    SC_HAS_PROCESS(kernel0_U_drain_IO_L3_out);

    ~kernel0_U_drain_IO_L3_out();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > U_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > U_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln764_reg_252;
    sc_signal< sc_lv<1> > icmp_ln764_reg_252_pp0_iter1_reg;
    sc_signal< sc_logic > U_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > U_offset_blk_n;
    sc_signal< sc_logic > fifo_U_drain_local_in_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<4> > i_op_assign_i_reg_133;
    sc_signal< sc_lv<63> > zext_ln752_cast_i_fu_154_p1;
    sc_signal< sc_lv<63> > zext_ln752_cast_i_reg_223;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<8> > add_ln759_fu_158_p2;
    sc_signal< sc_lv<8> > add_ln759_reg_228;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > c0_V_fu_170_p2;
    sc_signal< sc_lv<4> > c0_V_reg_236;
    sc_signal< sc_lv<4> > ret_V_fu_176_p2;
    sc_signal< sc_lv<4> > ret_V_reg_241;
    sc_signal< sc_lv<1> > icmp_ln759_fu_164_p2;
    sc_signal< sc_lv<64> > U_addr_reg_246;
    sc_signal< sc_lv<1> > icmp_ln764_fu_205_p2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state6_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > c3_fu_211_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > tmp_2_reg_261;
    sc_signal< sc_lv<4> > add_ln759_1_fu_217_p2;
    sc_signal< sc_lv<4> > add_ln759_1_reg_266;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state4;
    sc_signal< sc_lv<4> > indvars_iv_i_reg_99;
    sc_signal< sc_lv<4> > p_0102_0_i_reg_111;
    sc_signal< sc_lv<8> > phi_mul_i_reg_122;
    sc_signal< sc_lv<64> > zext_ln769_1_fu_191_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<62> > tmp_fu_144_p4;
    sc_signal< sc_lv<63> > zext_ln769_fu_182_p1;
    sc_signal< sc_lv<63> > add_ln769_fu_186_p2;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_pp0_stage0;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<9> ap_ST_fsm_state10;
    static const sc_lv<9> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<8> ap_const_lv8_D;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_B;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_U_blk_n_AW();
    void thread_U_blk_n_B();
    void thread_U_blk_n_W();
    void thread_U_offset_blk_n();
    void thread_U_offset_read();
    void thread_add_ln759_1_fu_217_p2();
    void thread_add_ln759_fu_158_p2();
    void thread_add_ln769_fu_186_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state4_pp0_stage0_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_block_state6_io();
    void thread_ap_block_state6_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_c0_V_fu_170_p2();
    void thread_c3_fu_211_p2();
    void thread_fifo_U_drain_local_in_V_blk_n();
    void thread_fifo_U_drain_local_in_V_read();
    void thread_icmp_ln759_fu_164_p2();
    void thread_icmp_ln764_fu_205_p2();
    void thread_m_axi_U_ARADDR();
    void thread_m_axi_U_ARBURST();
    void thread_m_axi_U_ARCACHE();
    void thread_m_axi_U_ARID();
    void thread_m_axi_U_ARLEN();
    void thread_m_axi_U_ARLOCK();
    void thread_m_axi_U_ARPROT();
    void thread_m_axi_U_ARQOS();
    void thread_m_axi_U_ARREGION();
    void thread_m_axi_U_ARSIZE();
    void thread_m_axi_U_ARUSER();
    void thread_m_axi_U_ARVALID();
    void thread_m_axi_U_AWADDR();
    void thread_m_axi_U_AWBURST();
    void thread_m_axi_U_AWCACHE();
    void thread_m_axi_U_AWID();
    void thread_m_axi_U_AWLEN();
    void thread_m_axi_U_AWLOCK();
    void thread_m_axi_U_AWPROT();
    void thread_m_axi_U_AWQOS();
    void thread_m_axi_U_AWREGION();
    void thread_m_axi_U_AWSIZE();
    void thread_m_axi_U_AWUSER();
    void thread_m_axi_U_AWVALID();
    void thread_m_axi_U_BREADY();
    void thread_m_axi_U_RREADY();
    void thread_m_axi_U_WDATA();
    void thread_m_axi_U_WID();
    void thread_m_axi_U_WLAST();
    void thread_m_axi_U_WSTRB();
    void thread_m_axi_U_WUSER();
    void thread_m_axi_U_WVALID();
    void thread_ret_V_fu_176_p2();
    void thread_tmp_fu_144_p4();
    void thread_zext_ln752_cast_i_fu_154_p1();
    void thread_zext_ln769_1_fu_191_p1();
    void thread_zext_ln769_fu_182_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
