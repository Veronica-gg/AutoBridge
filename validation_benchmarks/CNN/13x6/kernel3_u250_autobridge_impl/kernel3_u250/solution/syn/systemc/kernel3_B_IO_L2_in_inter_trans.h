// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel3_B_IO_L2_in_inter_trans_HH_
#define _kernel3_B_IO_L2_in_inter_trans_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct kernel3_B_IO_L2_in_inter_trans : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<4> > idx;
    sc_out< sc_lv<12> > local_B_V_address1;
    sc_out< sc_logic > local_B_V_ce1;
    sc_out< sc_logic > local_B_V_we1;
    sc_out< sc_lv<256> > local_B_V_d1;
    sc_in< sc_lv<256> > fifo_B_in_V_V_dout;
    sc_in< sc_logic > fifo_B_in_V_V_empty_n;
    sc_out< sc_logic > fifo_B_in_V_V_read;
    sc_out< sc_lv<256> > fifo_B_out_V_V_din;
    sc_in< sc_logic > fifo_B_out_V_V_full_n;
    sc_out< sc_logic > fifo_B_out_V_V_write;


    // Module declarations
    kernel3_B_IO_L2_in_inter_trans(sc_module_name name);
    SC_HAS_PROCESS(kernel3_B_IO_L2_in_inter_trans);

    ~kernel3_B_IO_L2_in_inter_trans();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > fifo_B_in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln899_reg_385;
    sc_signal< sc_logic > fifo_B_out_V_V_blk_n;
    sc_signal< sc_lv<1> > select_ln879_74_reg_394;
    sc_signal< sc_lv<14> > indvar_flatten14_reg_134;
    sc_signal< sc_lv<3> > c3_V_1_reg_145;
    sc_signal< sc_lv<13> > indvar_flatten_reg_154;
    sc_signal< sc_lv<7> > p_053_0_reg_165;
    sc_signal< sc_lv<6> > p_067_0_reg_176;
    sc_signal< sc_lv<3> > trunc_ln304_fu_187_p1;
    sc_signal< sc_lv<3> > trunc_ln304_reg_373;
    sc_signal< sc_lv<14> > tmp_s_fu_211_p3;
    sc_signal< sc_lv<14> > tmp_s_reg_380;
    sc_signal< sc_lv<1> > icmp_ln899_fu_219_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<14> > add_ln899_fu_224_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > select_ln879_74_fu_260_p3;
    sc_signal< sc_lv<3> > select_ln899_fu_286_p3;
    sc_signal< sc_lv<6> > select_ln544_fu_306_p3;
    sc_signal< sc_lv<6> > select_ln544_reg_403;
    sc_signal< sc_lv<7> > select_ln544_85_fu_314_p3;
    sc_signal< sc_lv<7> > select_ln544_85_reg_408;
    sc_signal< sc_lv<6> > c5_V_fu_322_p2;
    sc_signal< sc_lv<13> > select_ln306_fu_334_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<7> > ap_phi_mux_p_053_0_phi_fu_169_p4;
    sc_signal< sc_lv<64> > zext_ln321_159_fu_368_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > empty_fu_191_p2;
    sc_signal< sc_lv<3> > umax2_cast_fu_197_p3;
    sc_signal< sc_lv<3> > sub_ln304_fu_205_p2;
    sc_signal< sc_lv<1> > icmp_ln306_fu_236_p2;
    sc_signal< sc_lv<3> > c3_V_fu_230_p2;
    sc_signal< sc_lv<1> > icmp_ln879_fu_250_p2;
    sc_signal< sc_lv<1> > icmp_ln879_6_fu_255_p2;
    sc_signal< sc_lv<1> > icmp_ln308_fu_274_p2;
    sc_signal< sc_lv<1> > xor_ln879_fu_268_p2;
    sc_signal< sc_lv<7> > select_ln879_fu_242_p3;
    sc_signal< sc_lv<1> > and_ln879_fu_280_p2;
    sc_signal< sc_lv<1> > or_ln544_fu_300_p2;
    sc_signal< sc_lv<7> > c4_V_fu_294_p2;
    sc_signal< sc_lv<13> > add_ln306_fu_328_p2;
    sc_signal< sc_lv<12> > tmp_83_fu_342_p3;
    sc_signal< sc_lv<14> > zext_ln306_fu_349_p1;
    sc_signal< sc_lv<14> > zext_ln321_fu_353_p1;
    sc_signal< sc_lv<14> > add_ln321_fu_356_p2;
    sc_signal< sc_lv<14> > add_ln321_3_fu_362_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<13> ap_const_lv13_800;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<14> ap_const_lv14_800;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln306_fu_328_p2();
    void thread_add_ln321_3_fu_362_p2();
    void thread_add_ln321_fu_356_p2();
    void thread_add_ln899_fu_224_p2();
    void thread_and_ln879_fu_280_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_p_053_0_phi_fu_169_p4();
    void thread_ap_ready();
    void thread_c3_V_fu_230_p2();
    void thread_c4_V_fu_294_p2();
    void thread_c5_V_fu_322_p2();
    void thread_empty_fu_191_p2();
    void thread_fifo_B_in_V_V_blk_n();
    void thread_fifo_B_in_V_V_read();
    void thread_fifo_B_out_V_V_blk_n();
    void thread_fifo_B_out_V_V_din();
    void thread_fifo_B_out_V_V_write();
    void thread_icmp_ln306_fu_236_p2();
    void thread_icmp_ln308_fu_274_p2();
    void thread_icmp_ln879_6_fu_255_p2();
    void thread_icmp_ln879_fu_250_p2();
    void thread_icmp_ln899_fu_219_p2();
    void thread_local_B_V_address1();
    void thread_local_B_V_ce1();
    void thread_local_B_V_d1();
    void thread_local_B_V_we1();
    void thread_or_ln544_fu_300_p2();
    void thread_select_ln306_fu_334_p3();
    void thread_select_ln544_85_fu_314_p3();
    void thread_select_ln544_fu_306_p3();
    void thread_select_ln879_74_fu_260_p3();
    void thread_select_ln879_fu_242_p3();
    void thread_select_ln899_fu_286_p3();
    void thread_sub_ln304_fu_205_p2();
    void thread_tmp_83_fu_342_p3();
    void thread_tmp_s_fu_211_p3();
    void thread_trunc_ln304_fu_187_p1();
    void thread_umax2_cast_fu_197_p3();
    void thread_xor_ln879_fu_268_p2();
    void thread_zext_ln306_fu_349_p1();
    void thread_zext_ln321_159_fu_368_p1();
    void thread_zext_ln321_fu_353_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
