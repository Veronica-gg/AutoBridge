-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel3_A_IO_L2_in627 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_A_in_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    fifo_A_in_V_V_empty_n : IN STD_LOGIC;
    fifo_A_in_V_V_read : OUT STD_LOGIC;
    fifo_A_out_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fifo_A_out_V_V_full_n : IN STD_LOGIC;
    fifo_A_out_V_V_write : OUT STD_LOGIC;
    fifo_A_local_out_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fifo_A_local_out_V_V_full_n : IN STD_LOGIC;
    fifo_A_local_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of kernel3_A_IO_L2_in627 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal local_A_ce0 : STD_LOGIC;
    signal local_A_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal local_A_ce1 : STD_LOGIC;
    signal local_A_we1 : STD_LOGIC;
    signal grp_A_IO_L2_in_inter_trans_fu_47_ap_start : STD_LOGIC;
    signal grp_A_IO_L2_in_inter_trans_fu_47_ap_done : STD_LOGIC;
    signal grp_A_IO_L2_in_inter_trans_fu_47_ap_idle : STD_LOGIC;
    signal grp_A_IO_L2_in_inter_trans_fu_47_ap_ready : STD_LOGIC;
    signal grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_ce1 : STD_LOGIC;
    signal grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_we1 : STD_LOGIC;
    signal grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_d1 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_A_IO_L2_in_inter_trans_fu_47_fifo_A_in_V_V_read : STD_LOGIC;
    signal grp_A_IO_L2_in_inter_trans_fu_47_fifo_A_out_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_A_IO_L2_in_inter_trans_fu_47_fifo_A_out_V_V_write : STD_LOGIC;
    signal grp_A_IO_L2_in_intra_trans_1_fu_59_ap_start : STD_LOGIC;
    signal grp_A_IO_L2_in_intra_trans_1_fu_59_ap_done : STD_LOGIC;
    signal grp_A_IO_L2_in_intra_trans_1_fu_59_ap_idle : STD_LOGIC;
    signal grp_A_IO_L2_in_intra_trans_1_fu_59_ap_ready : STD_LOGIC;
    signal grp_A_IO_L2_in_intra_trans_1_fu_59_local_A_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_A_IO_L2_in_intra_trans_1_fu_59_local_A_V_ce0 : STD_LOGIC;
    signal grp_A_IO_L2_in_intra_trans_1_fu_59_fifo_A_local_out_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_A_IO_L2_in_intra_trans_1_fu_59_fifo_A_local_out_V_V_write : STD_LOGIC;
    signal grp_A_IO_L2_in_inter_trans_fu_47_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call7 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_A_IO_L2_in_intra_trans_1_fu_59_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;

    component kernel3_A_IO_L2_in_inter_trans IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        idx : IN STD_LOGIC_VECTOR (4 downto 0);
        local_A_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        local_A_V_ce1 : OUT STD_LOGIC;
        local_A_V_we1 : OUT STD_LOGIC;
        local_A_V_d1 : OUT STD_LOGIC_VECTOR (255 downto 0);
        fifo_A_in_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        fifo_A_in_V_V_empty_n : IN STD_LOGIC;
        fifo_A_in_V_V_read : OUT STD_LOGIC;
        fifo_A_out_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        fifo_A_out_V_V_full_n : IN STD_LOGIC;
        fifo_A_out_V_V_write : OUT STD_LOGIC );
    end component;


    component kernel3_A_IO_L2_in_intra_trans_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        local_A_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        local_A_V_ce0 : OUT STD_LOGIC;
        local_A_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        fifo_A_local_out_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        fifo_A_local_out_V_V_full_n : IN STD_LOGIC;
        fifo_A_local_out_V_V_write : OUT STD_LOGIC );
    end component;


    component kernel3_A_IO_L2_in624_local_A IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    local_A_U : component kernel3_A_IO_L2_in624_local_A
    generic map (
        DataWidth => 256,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_A_IO_L2_in_intra_trans_1_fu_59_local_A_V_address0,
        ce0 => local_A_ce0,
        q0 => local_A_q0,
        address1 => grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_address1,
        ce1 => local_A_ce1,
        we1 => local_A_we1,
        d1 => grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_d1);

    grp_A_IO_L2_in_inter_trans_fu_47 : component kernel3_A_IO_L2_in_inter_trans
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_A_IO_L2_in_inter_trans_fu_47_ap_start,
        ap_done => grp_A_IO_L2_in_inter_trans_fu_47_ap_done,
        ap_idle => grp_A_IO_L2_in_inter_trans_fu_47_ap_idle,
        ap_ready => grp_A_IO_L2_in_inter_trans_fu_47_ap_ready,
        idx => ap_const_lv5_3,
        local_A_V_address1 => grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_address1,
        local_A_V_ce1 => grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_ce1,
        local_A_V_we1 => grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_we1,
        local_A_V_d1 => grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_d1,
        fifo_A_in_V_V_dout => fifo_A_in_V_V_dout,
        fifo_A_in_V_V_empty_n => fifo_A_in_V_V_empty_n,
        fifo_A_in_V_V_read => grp_A_IO_L2_in_inter_trans_fu_47_fifo_A_in_V_V_read,
        fifo_A_out_V_V_din => grp_A_IO_L2_in_inter_trans_fu_47_fifo_A_out_V_V_din,
        fifo_A_out_V_V_full_n => fifo_A_out_V_V_full_n,
        fifo_A_out_V_V_write => grp_A_IO_L2_in_inter_trans_fu_47_fifo_A_out_V_V_write);

    grp_A_IO_L2_in_intra_trans_1_fu_59 : component kernel3_A_IO_L2_in_intra_trans_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_A_IO_L2_in_intra_trans_1_fu_59_ap_start,
        ap_done => grp_A_IO_L2_in_intra_trans_1_fu_59_ap_done,
        ap_idle => grp_A_IO_L2_in_intra_trans_1_fu_59_ap_idle,
        ap_ready => grp_A_IO_L2_in_intra_trans_1_fu_59_ap_ready,
        local_A_V_address0 => grp_A_IO_L2_in_intra_trans_1_fu_59_local_A_V_address0,
        local_A_V_ce0 => grp_A_IO_L2_in_intra_trans_1_fu_59_local_A_V_ce0,
        local_A_V_q0 => local_A_q0,
        fifo_A_local_out_V_V_din => grp_A_IO_L2_in_intra_trans_1_fu_59_fifo_A_local_out_V_V_din,
        fifo_A_local_out_V_V_full_n => fifo_A_local_out_V_V_full_n,
        fifo_A_local_out_V_V_write => grp_A_IO_L2_in_intra_trans_1_fu_59_fifo_A_local_out_V_V_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_A_IO_L2_in_intra_trans_1_fu_59_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_A_IO_L2_in_inter_trans_fu_47_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_A_IO_L2_in_inter_trans_fu_47_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_A_IO_L2_in_inter_trans_fu_47_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_A_IO_L2_in_inter_trans_fu_47_ap_ready = ap_const_logic_1)) then 
                    grp_A_IO_L2_in_inter_trans_fu_47_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_A_IO_L2_in_intra_trans_1_fu_59_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_A_IO_L2_in_intra_trans_1_fu_59_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_A_IO_L2_in_intra_trans_1_fu_59_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_A_IO_L2_in_intra_trans_1_fu_59_ap_ready = ap_const_logic_1)) then 
                    grp_A_IO_L2_in_intra_trans_1_fu_59_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_A_IO_L2_in_inter_trans_fu_47_ap_done, grp_A_IO_L2_in_intra_trans_1_fu_59_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_A_IO_L2_in_inter_trans_fu_47_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_A_IO_L2_in_intra_trans_1_fu_59_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call7_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call7 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_A_IO_L2_in_intra_trans_1_fu_59_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_A_IO_L2_in_intra_trans_1_fu_59_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_A_IO_L2_in_intra_trans_1_fu_59_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_A_IO_L2_in_intra_trans_1_fu_59_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    fifo_A_in_V_V_read_assign_proc : process(grp_A_IO_L2_in_inter_trans_fu_47_fifo_A_in_V_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fifo_A_in_V_V_read <= grp_A_IO_L2_in_inter_trans_fu_47_fifo_A_in_V_V_read;
        else 
            fifo_A_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    fifo_A_local_out_V_V_din <= grp_A_IO_L2_in_intra_trans_1_fu_59_fifo_A_local_out_V_V_din;

    fifo_A_local_out_V_V_write_assign_proc : process(grp_A_IO_L2_in_intra_trans_1_fu_59_fifo_A_local_out_V_V_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fifo_A_local_out_V_V_write <= grp_A_IO_L2_in_intra_trans_1_fu_59_fifo_A_local_out_V_V_write;
        else 
            fifo_A_local_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    fifo_A_out_V_V_din <= grp_A_IO_L2_in_inter_trans_fu_47_fifo_A_out_V_V_din;

    fifo_A_out_V_V_write_assign_proc : process(grp_A_IO_L2_in_inter_trans_fu_47_fifo_A_out_V_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fifo_A_out_V_V_write <= grp_A_IO_L2_in_inter_trans_fu_47_fifo_A_out_V_V_write;
        else 
            fifo_A_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_A_IO_L2_in_inter_trans_fu_47_ap_start <= grp_A_IO_L2_in_inter_trans_fu_47_ap_start_reg;
    grp_A_IO_L2_in_intra_trans_1_fu_59_ap_start <= grp_A_IO_L2_in_intra_trans_1_fu_59_ap_start_reg;

    local_A_ce0_assign_proc : process(grp_A_IO_L2_in_intra_trans_1_fu_59_local_A_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            local_A_ce0 <= grp_A_IO_L2_in_intra_trans_1_fu_59_local_A_V_ce0;
        else 
            local_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_A_ce1_assign_proc : process(grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            local_A_ce1 <= grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_ce1;
        else 
            local_A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_A_we1_assign_proc : process(grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            local_A_we1 <= grp_A_IO_L2_in_inter_trans_fu_47_local_A_V_we1;
        else 
            local_A_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
