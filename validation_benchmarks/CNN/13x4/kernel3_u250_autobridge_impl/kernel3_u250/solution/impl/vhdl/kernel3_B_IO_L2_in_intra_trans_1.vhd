-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel3_B_IO_L2_in_intra_trans_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    local_B_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    local_B_V_ce0 : OUT STD_LOGIC;
    local_B_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
    fifo_B_local_out_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fifo_B_local_out_V_V_full_n : IN STD_LOGIC;
    fifo_B_local_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of kernel3_B_IO_L2_in_intra_trans_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv14_800 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_B_local_out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln278_reg_295 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_295_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten14_reg_103 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_02_0_reg_114 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_125 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_055_0_reg_136 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_045_0_reg_147 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln278_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln278_fu_164_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln544_56_fu_190_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln544_56_reg_304 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln544_57_fu_222_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln544_57_reg_310 : STD_LOGIC_VECTOR (6 downto 0);
    signal c7_V_fu_242_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln280_fu_256_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_p_02_0_phi_fu_118_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_p_055_0_phi_fu_140_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln321_105_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln280_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_V_fu_170_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln282_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln544_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln544_fu_182_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln544_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c6_V_fu_216_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln700_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_59_fu_230_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln280_fu_250_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_58_fu_267_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln321_fu_274_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln544_fu_264_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln321_fu_278_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln321_1_fu_284_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten14_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten14_reg_103 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln278_fu_158_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten14_reg_103 <= add_ln278_fu_164_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_125 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln278_fu_158_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_125 <= select_ln280_fu_256_p3;
            end if; 
        end if;
    end process;

    p_02_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_02_0_reg_114 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln278_reg_295 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                p_02_0_reg_114 <= select_ln544_56_reg_304;
            end if; 
        end if;
    end process;

    p_045_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_045_0_reg_147 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln278_fu_158_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_045_0_reg_147 <= c7_V_fu_242_p3;
            end if; 
        end if;
    end process;

    p_055_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_055_0_reg_136 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln278_reg_295 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                p_055_0_reg_136 <= select_ln544_57_reg_310;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln278_reg_295 <= icmp_ln278_fu_158_p2;
                icmp_ln278_reg_295_pp0_iter1_reg <= icmp_ln278_reg_295;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln278_fu_158_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln544_56_reg_304 <= select_ln544_56_fu_190_p3;
                select_ln544_57_reg_310 <= select_ln544_57_fu_222_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter2, icmp_ln278_fu_158_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln278_fu_158_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln278_fu_158_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln278_fu_164_p2 <= std_logic_vector(unsigned(indvar_flatten14_reg_103) + unsigned(ap_const_lv16_1));
    add_ln280_fu_250_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_125) + unsigned(ap_const_lv12_1));
    add_ln321_1_fu_284_p2 <= std_logic_vector(unsigned(add_ln321_fu_278_p2) + unsigned(ap_const_lv14_800));
    add_ln321_fu_278_p2 <= std_logic_vector(unsigned(zext_ln321_fu_274_p1) + unsigned(zext_ln544_fu_264_p1));
    add_ln700_59_fu_230_p2 <= std_logic_vector(unsigned(p_045_0_reg_147) + unsigned(ap_const_lv5_1));
    and_ln544_fu_210_p2 <= (xor_ln544_fu_198_p2 and icmp_ln282_fu_204_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_B_local_out_V_V_full_n, ap_enable_reg_pp0_iter2, icmp_ln278_reg_295_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln278_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (fifo_B_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_B_local_out_V_V_full_n, ap_enable_reg_pp0_iter2, icmp_ln278_reg_295_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln278_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (fifo_B_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_B_local_out_V_V_full_n, ap_enable_reg_pp0_iter2, icmp_ln278_reg_295_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln278_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (fifo_B_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter2_assign_proc : process(fifo_B_local_out_V_V_full_n, icmp_ln278_reg_295_pp0_iter1_reg)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((icmp_ln278_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (fifo_B_local_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln278_fu_158_p2)
    begin
        if ((icmp_ln278_fu_158_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_02_0_phi_fu_118_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln278_reg_295, p_02_0_reg_114, ap_CS_fsm_pp0_stage0, select_ln544_56_reg_304, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln278_reg_295 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_p_02_0_phi_fu_118_p4 <= select_ln544_56_reg_304;
        else 
            ap_phi_mux_p_02_0_phi_fu_118_p4 <= p_02_0_reg_114;
        end if; 
    end process;


    ap_phi_mux_p_055_0_phi_fu_140_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln278_reg_295, p_055_0_reg_136, ap_CS_fsm_pp0_stage0, select_ln544_57_reg_310, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln278_reg_295 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_p_055_0_phi_fu_140_p4 <= select_ln544_57_reg_310;
        else 
            ap_phi_mux_p_055_0_phi_fu_140_p4 <= p_055_0_reg_136;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c5_V_fu_170_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_02_0_phi_fu_118_p4) + unsigned(ap_const_lv6_1));
    c6_V_fu_216_p2 <= std_logic_vector(unsigned(select_ln544_fu_182_p3) + unsigned(ap_const_lv7_1));
    c7_V_fu_242_p3 <= 
        ap_const_lv5_1 when (or_ln700_fu_236_p2(0) = '1') else 
        add_ln700_59_fu_230_p2;

    fifo_B_local_out_V_V_blk_n_assign_proc : process(fifo_B_local_out_V_V_full_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln278_reg_295_pp0_iter1_reg)
    begin
        if (((icmp_ln278_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            fifo_B_local_out_V_V_blk_n <= fifo_B_local_out_V_V_full_n;
        else 
            fifo_B_local_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_local_out_V_V_din <= local_B_V_q0;

    fifo_B_local_out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln278_reg_295_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln278_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            fifo_B_local_out_V_V_write <= ap_const_logic_1;
        else 
            fifo_B_local_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln278_fu_158_p2 <= "1" when (indvar_flatten14_reg_103 = ap_const_lv16_8000) else "0";
    icmp_ln280_fu_176_p2 <= "1" when (indvar_flatten_reg_125 = ap_const_lv12_400) else "0";
    icmp_ln282_fu_204_p2 <= "1" when (p_045_0_reg_147 = ap_const_lv5_10) else "0";
    local_B_V_address0 <= zext_ln321_105_fu_290_p1(12 - 1 downto 0);

    local_B_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            local_B_V_ce0 <= ap_const_logic_1;
        else 
            local_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln700_fu_236_p2 <= (icmp_ln280_fu_176_p2 or and_ln544_fu_210_p2);
    select_ln280_fu_256_p3 <= 
        ap_const_lv12_1 when (icmp_ln280_fu_176_p2(0) = '1') else 
        add_ln280_fu_250_p2;
    select_ln544_56_fu_190_p3 <= 
        c5_V_fu_170_p2 when (icmp_ln280_fu_176_p2(0) = '1') else 
        ap_phi_mux_p_02_0_phi_fu_118_p4;
    select_ln544_57_fu_222_p3 <= 
        c6_V_fu_216_p2 when (and_ln544_fu_210_p2(0) = '1') else 
        select_ln544_fu_182_p3;
    select_ln544_fu_182_p3 <= 
        ap_const_lv7_0 when (icmp_ln280_fu_176_p2(0) = '1') else 
        ap_phi_mux_p_055_0_phi_fu_140_p4;
    tmp_58_fu_267_p3 <= (select_ln544_57_reg_310 & ap_const_lv5_0);
    xor_ln544_fu_198_p2 <= (icmp_ln280_fu_176_p2 xor ap_const_lv1_1);
    zext_ln321_105_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_1_fu_284_p2),64));
    zext_ln321_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_267_p3),14));
    zext_ln544_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln544_56_reg_304),14));
end behav;
