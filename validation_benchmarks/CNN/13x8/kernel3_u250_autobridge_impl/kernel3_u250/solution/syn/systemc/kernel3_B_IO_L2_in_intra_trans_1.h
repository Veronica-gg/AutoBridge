// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel3_B_IO_L2_in_intra_trans_1_HH_
#define _kernel3_B_IO_L2_in_intra_trans_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct kernel3_B_IO_L2_in_intra_trans_1 : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<12> > local_B_V_address0;
    sc_out< sc_logic > local_B_V_ce0;
    sc_in< sc_lv<256> > local_B_V_q0;
    sc_out< sc_lv<256> > fifo_B_local_out_V_V_din;
    sc_in< sc_logic > fifo_B_local_out_V_V_full_n;
    sc_out< sc_logic > fifo_B_local_out_V_V_write;


    // Module declarations
    kernel3_B_IO_L2_in_intra_trans_1(sc_module_name name);
    SC_HAS_PROCESS(kernel3_B_IO_L2_in_intra_trans_1);

    ~kernel3_B_IO_L2_in_intra_trans_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > fifo_B_local_out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln278_reg_295;
    sc_signal< sc_lv<1> > icmp_ln278_reg_295_pp0_iter1_reg;
    sc_signal< sc_lv<16> > indvar_flatten14_reg_103;
    sc_signal< sc_lv<6> > p_02_0_reg_114;
    sc_signal< sc_lv<12> > indvar_flatten_reg_125;
    sc_signal< sc_lv<7> > p_055_0_reg_136;
    sc_signal< sc_lv<5> > p_045_0_reg_147;
    sc_signal< sc_lv<1> > icmp_ln278_fu_158_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<16> > add_ln278_fu_164_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<6> > select_ln544_108_fu_190_p3;
    sc_signal< sc_lv<6> > select_ln544_108_reg_304;
    sc_signal< sc_lv<7> > select_ln544_109_fu_222_p3;
    sc_signal< sc_lv<7> > select_ln544_109_reg_310;
    sc_signal< sc_lv<5> > c7_V_fu_242_p3;
    sc_signal< sc_lv<12> > select_ln280_fu_256_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<6> > ap_phi_mux_p_02_0_phi_fu_118_p4;
    sc_signal< sc_lv<7> > ap_phi_mux_p_055_0_phi_fu_140_p4;
    sc_signal< sc_lv<64> > zext_ln321_209_fu_290_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln280_fu_176_p2;
    sc_signal< sc_lv<6> > c5_V_fu_170_p2;
    sc_signal< sc_lv<1> > icmp_ln282_fu_204_p2;
    sc_signal< sc_lv<1> > xor_ln544_fu_198_p2;
    sc_signal< sc_lv<7> > select_ln544_fu_182_p3;
    sc_signal< sc_lv<1> > and_ln544_fu_210_p2;
    sc_signal< sc_lv<7> > c6_V_fu_216_p2;
    sc_signal< sc_lv<1> > or_ln700_fu_236_p2;
    sc_signal< sc_lv<5> > add_ln700_115_fu_230_p2;
    sc_signal< sc_lv<12> > add_ln280_fu_250_p2;
    sc_signal< sc_lv<12> > tmp_106_fu_267_p3;
    sc_signal< sc_lv<14> > zext_ln321_fu_274_p1;
    sc_signal< sc_lv<14> > zext_ln544_fu_264_p1;
    sc_signal< sc_lv<14> > add_ln321_fu_278_p2;
    sc_signal< sc_lv<14> > add_ln321_1_fu_284_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<16> ap_const_lv16_8000;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<12> ap_const_lv12_400;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<14> ap_const_lv14_800;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln278_fu_164_p2();
    void thread_add_ln280_fu_250_p2();
    void thread_add_ln321_1_fu_284_p2();
    void thread_add_ln321_fu_278_p2();
    void thread_add_ln700_115_fu_230_p2();
    void thread_and_ln544_fu_210_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_p_02_0_phi_fu_118_p4();
    void thread_ap_phi_mux_p_055_0_phi_fu_140_p4();
    void thread_ap_ready();
    void thread_c5_V_fu_170_p2();
    void thread_c6_V_fu_216_p2();
    void thread_c7_V_fu_242_p3();
    void thread_fifo_B_local_out_V_V_blk_n();
    void thread_fifo_B_local_out_V_V_din();
    void thread_fifo_B_local_out_V_V_write();
    void thread_icmp_ln278_fu_158_p2();
    void thread_icmp_ln280_fu_176_p2();
    void thread_icmp_ln282_fu_204_p2();
    void thread_local_B_V_address0();
    void thread_local_B_V_ce0();
    void thread_or_ln700_fu_236_p2();
    void thread_select_ln280_fu_256_p3();
    void thread_select_ln544_108_fu_190_p3();
    void thread_select_ln544_109_fu_222_p3();
    void thread_select_ln544_fu_182_p3();
    void thread_tmp_106_fu_267_p3();
    void thread_xor_ln544_fu_198_p2();
    void thread_zext_ln321_209_fu_290_p1();
    void thread_zext_ln321_fu_274_p1();
    void thread_zext_ln544_fu_264_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
