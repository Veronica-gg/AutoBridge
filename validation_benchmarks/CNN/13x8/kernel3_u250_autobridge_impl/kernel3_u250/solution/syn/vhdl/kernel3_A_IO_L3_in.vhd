-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel3_A_IO_L3_in is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_A_V_AWVALID : OUT STD_LOGIC;
    m_axi_A_V_AWREADY : IN STD_LOGIC;
    m_axi_A_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_A_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_WVALID : OUT STD_LOGIC;
    m_axi_A_V_WREADY : IN STD_LOGIC;
    m_axi_A_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_A_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_A_V_WLAST : OUT STD_LOGIC;
    m_axi_A_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_ARVALID : OUT STD_LOGIC;
    m_axi_A_V_ARREADY : IN STD_LOGIC;
    m_axi_A_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_A_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_RVALID : IN STD_LOGIC;
    m_axi_A_V_RREADY : OUT STD_LOGIC;
    m_axi_A_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_A_V_RLAST : IN STD_LOGIC;
    m_axi_A_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_BVALID : IN STD_LOGIC;
    m_axi_A_V_BREADY : OUT STD_LOGIC;
    m_axi_A_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    A_V_offset_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    A_V_offset_empty_n : IN STD_LOGIC;
    A_V_offset_read : OUT STD_LOGIC;
    fifo_A_local_out_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fifo_A_local_out_V_V_full_n : IN STD_LOGIC;
    fifo_A_local_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of kernel3_A_IO_L3_in is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_D00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110100000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_D00 : STD_LOGIC_VECTOR (11 downto 0) := "110100000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal A_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln887_reg_161 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_offset_blk_n : STD_LOGIC;
    signal fifo_A_local_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln887_reg_161_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_93 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_V_offset1_i_reg_150 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln887_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_V_fu_130_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_165 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_fu_136_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_V_reg_170 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_state10_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_V_120_reg_175 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_t_V_phi_fu_97_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln3_fu_114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_325 : BOOLEAN;
    signal ap_condition_329 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_161 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_reg_93 <= i_V_reg_165;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                t_V_reg_93 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                A_V_offset1_i_reg_150 <= A_V_offset_dout(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_V_reg_165 <= i_V_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln887_reg_161 <= icmp_ln887_fu_124_p2;
                icmp_ln887_reg_161_pp0_iter1_reg <= icmp_ln887_reg_161;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_161 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_V_120_reg_175 <= m_axi_A_V_RDATA(511 downto 256);
                tmp_V_reg_170 <= tmp_V_fu_136_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_A_V_ARREADY, A_V_offset_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln887_fu_124_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_A_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln887_fu_124_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln887_fu_124_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    A_V_blk_n_AR_assign_proc : process(m_axi_A_V_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_V_blk_n_AR <= m_axi_A_V_ARREADY;
        else 
            A_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    A_V_blk_n_R_assign_proc : process(m_axi_A_V_RVALID, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln887_reg_161)
    begin
        if (((icmp_ln887_reg_161 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            A_V_blk_n_R <= m_axi_A_V_RVALID;
        else 
            A_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    A_V_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, A_V_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_V_offset_blk_n <= A_V_offset_empty_n;
        else 
            A_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_V_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, A_V_offset_empty_n)
    begin
        if ((not(((ap_const_logic_0 = A_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_V_offset_read <= ap_const_logic_1;
        else 
            A_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_A_local_out_V_V_full_n, icmp_ln887_reg_161, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln887_reg_161 = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_A_local_out_V_V_full_n, icmp_ln887_reg_161, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln887_reg_161 = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_A_local_out_V_V_full_n, icmp_ln887_reg_161, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln887_reg_161 = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(m_axi_A_V_RVALID, fifo_A_local_out_V_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln887_reg_161, ap_enable_reg_pp0_iter1, icmp_ln887_reg_161_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_01001 <= (((icmp_ln887_reg_161_pp0_iter1_reg = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln887_reg_161 = ap_const_lv1_0) and (m_axi_A_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(m_axi_A_V_RVALID, fifo_A_local_out_V_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln887_reg_161, ap_enable_reg_pp0_iter1, icmp_ln887_reg_161_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_11001 <= (((icmp_ln887_reg_161_pp0_iter1_reg = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln887_reg_161 = ap_const_lv1_0) and (m_axi_A_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(m_axi_A_V_RVALID, fifo_A_local_out_V_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln887_reg_161, ap_enable_reg_pp0_iter1, icmp_ln887_reg_161_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_subdone <= (((icmp_ln887_reg_161_pp0_iter1_reg = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln887_reg_161 = ap_const_lv1_0) and (m_axi_A_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, A_V_offset_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = A_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage1_iter0_assign_proc : process(m_axi_A_V_RVALID, icmp_ln887_reg_161)
    begin
                ap_block_state10_pp0_stage1_iter0 <= ((icmp_ln887_reg_161 = ap_const_lv1_0) and (m_axi_A_V_RVALID = ap_const_logic_0));
    end process;


    ap_block_state11_pp0_stage0_iter1_assign_proc : process(fifo_A_local_out_V_V_full_n, icmp_ln887_reg_161)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((icmp_ln887_reg_161 = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state12_pp0_stage1_iter1_assign_proc : process(fifo_A_local_out_V_V_full_n, icmp_ln887_reg_161_pp0_iter1_reg)
    begin
                ap_block_state12_pp0_stage1_iter1 <= ((icmp_ln887_reg_161_pp0_iter1_reg = ap_const_lv1_0) and (fifo_A_local_out_V_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_325_assign_proc : process(icmp_ln887_reg_161, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_01001)
    begin
                ap_condition_325 <= ((icmp_ln887_reg_161 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_329_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln887_reg_161_pp0_iter1_reg, ap_block_pp0_stage1_01001)
    begin
                ap_condition_329 <= ((icmp_ln887_reg_161_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln887_fu_124_p2)
    begin
        if ((icmp_ln887_fu_124_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_t_V_phi_fu_97_p4_assign_proc : process(icmp_ln887_reg_161, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, t_V_reg_93, i_V_reg_165)
    begin
        if (((icmp_ln887_reg_161 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_t_V_phi_fu_97_p4 <= i_V_reg_165;
        else 
            ap_phi_mux_t_V_phi_fu_97_p4 <= t_V_reg_93;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    fifo_A_local_out_V_V_blk_n_assign_proc : process(fifo_A_local_out_V_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, icmp_ln887_reg_161, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln887_reg_161_pp0_iter1_reg)
    begin
        if ((((icmp_ln887_reg_161 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln887_reg_161_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            fifo_A_local_out_V_V_blk_n <= fifo_A_local_out_V_V_full_n;
        else 
            fifo_A_local_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_A_local_out_V_V_din_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_V_reg_170, tmp_V_120_reg_175, ap_condition_325, ap_condition_329)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_329)) then 
                fifo_A_local_out_V_V_din <= tmp_V_120_reg_175;
            elsif ((ap_const_boolean_1 = ap_condition_325)) then 
                fifo_A_local_out_V_V_din <= tmp_V_reg_170;
            else 
                fifo_A_local_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            fifo_A_local_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fifo_A_local_out_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln887_reg_161, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln887_reg_161_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((icmp_ln887_reg_161 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln887_reg_161_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            fifo_A_local_out_V_V_write <= ap_const_logic_1;
        else 
            fifo_A_local_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_130_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_phi_fu_97_p4) + unsigned(ap_const_lv12_1));
    icmp_ln887_fu_124_p2 <= "1" when (ap_phi_mux_t_V_phi_fu_97_p4 = ap_const_lv12_D00) else "0";
    m_axi_A_V_ARADDR <= zext_ln3_fu_114_p1;
    m_axi_A_V_ARBURST <= ap_const_lv2_0;
    m_axi_A_V_ARCACHE <= ap_const_lv4_0;
    m_axi_A_V_ARID <= ap_const_lv1_0;
    m_axi_A_V_ARLEN <= ap_const_lv32_D00;
    m_axi_A_V_ARLOCK <= ap_const_lv2_0;
    m_axi_A_V_ARPROT <= ap_const_lv3_0;
    m_axi_A_V_ARQOS <= ap_const_lv4_0;
    m_axi_A_V_ARREGION <= ap_const_lv4_0;
    m_axi_A_V_ARSIZE <= ap_const_lv3_0;
    m_axi_A_V_ARUSER <= ap_const_lv1_0;

    m_axi_A_V_ARVALID_assign_proc : process(m_axi_A_V_ARREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_A_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_A_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_A_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_A_V_AWADDR <= ap_const_lv64_0;
    m_axi_A_V_AWBURST <= ap_const_lv2_0;
    m_axi_A_V_AWCACHE <= ap_const_lv4_0;
    m_axi_A_V_AWID <= ap_const_lv1_0;
    m_axi_A_V_AWLEN <= ap_const_lv32_0;
    m_axi_A_V_AWLOCK <= ap_const_lv2_0;
    m_axi_A_V_AWPROT <= ap_const_lv3_0;
    m_axi_A_V_AWQOS <= ap_const_lv4_0;
    m_axi_A_V_AWREGION <= ap_const_lv4_0;
    m_axi_A_V_AWSIZE <= ap_const_lv3_0;
    m_axi_A_V_AWUSER <= ap_const_lv1_0;
    m_axi_A_V_AWVALID <= ap_const_logic_0;
    m_axi_A_V_BREADY <= ap_const_logic_0;

    m_axi_A_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln887_reg_161, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln887_reg_161 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_A_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_A_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_A_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_A_V_WID <= ap_const_lv1_0;
    m_axi_A_V_WLAST <= ap_const_logic_0;
    m_axi_A_V_WSTRB <= ap_const_lv64_0;
    m_axi_A_V_WUSER <= ap_const_lv1_0;
    m_axi_A_V_WVALID <= ap_const_logic_0;
    tmp_V_fu_136_p1 <= m_axi_A_V_RDATA(256 - 1 downto 0);
    zext_ln3_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_V_offset1_i_reg_150),64));
end behav;
