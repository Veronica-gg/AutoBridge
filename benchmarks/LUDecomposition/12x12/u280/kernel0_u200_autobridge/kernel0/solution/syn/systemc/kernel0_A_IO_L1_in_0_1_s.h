// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel0_A_IO_L1_in_0_1_s_HH_
#define _kernel0_A_IO_L1_in_0_1_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel0_kernel0_mux_124_32_1_1.h"

namespace ap_rtl {

struct kernel0_A_IO_L1_in_0_1_s : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > fifo_A_in_V_dout;
    sc_in< sc_logic > fifo_A_in_V_empty_n;
    sc_out< sc_logic > fifo_A_in_V_read;
    sc_out< sc_lv<32> > fifo_A_out_V_din;
    sc_in< sc_logic > fifo_A_out_V_full_n;
    sc_out< sc_logic > fifo_A_out_V_write;
    sc_out< sc_lv<32> > fifo_A_local_out_V_din;
    sc_in< sc_logic > fifo_A_local_out_V_full_n;
    sc_out< sc_logic > fifo_A_local_out_V_write;


    // Module declarations
    kernel0_A_IO_L1_in_0_1_s(sc_module_name name);
    SC_HAS_PROCESS(kernel0_A_IO_L1_in_0_1_s);

    ~kernel0_A_IO_L1_in_0_1_s();

    sc_trace_file* mVcdFile;

    kernel0_kernel0_mux_124_32_1_1<1,1,32,32,32,32,32,32,32,32,32,32,32,32,4,32>* kernel0_mux_124_32_1_1_U15;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > fifo_A_in_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln899_20_reg_445;
    sc_signal< sc_logic > fifo_A_out_V_blk_n;
    sc_signal< sc_logic > fifo_A_local_out_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<1> > icmp_ln899_reg_468;
    sc_signal< sc_lv<4> > p_039_0_i_reg_149;
    sc_signal< sc_lv<4> > p_050_0_i_reg_160;
    sc_signal< sc_lv<4> > p_02_0_i_reg_172;
    sc_signal< sc_lv<1> > icmp_ln115_fu_184_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln879_fu_190_p2;
    sc_signal< sc_lv<1> > icmp_ln899_20_fu_196_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > c2_V_17_fu_202_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > c1_V_fu_208_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln899_19_fu_214_p2;
    sc_signal< sc_lv<1> > icmp_ln899_19_reg_459;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<4> > c2_V_18_fu_220_p2;
    sc_signal< sc_lv<4> > c2_V_18_reg_463;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<1> > icmp_ln899_fu_286_p2;
    sc_signal< bool > ap_block_state8_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp2_stage0_iter1;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<4> > c2_V_fu_292_p2;
    sc_signal< sc_lv<4> > c2_V_reg_472;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state6;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp2_exit_iter0_state8;
    sc_signal< sc_lv<4> > p_04_0_i_reg_137;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<4> > ap_phi_mux_p_050_0_i_phi_fu_164_p4;
    sc_signal< sc_lv<4> > ap_phi_mux_p_02_0_i_phi_fu_176_p4;
    sc_signal< sc_lv<32> > tmp_fu_68;
    sc_signal< sc_lv<32> > tmp_1356_fu_72;
    sc_signal< sc_lv<32> > tmp_1357_fu_76;
    sc_signal< sc_lv<32> > tmp_1358_fu_80;
    sc_signal< sc_lv<32> > tmp_1359_fu_84;
    sc_signal< sc_lv<32> > tmp_1360_fu_88;
    sc_signal< sc_lv<32> > tmp_1361_fu_92;
    sc_signal< sc_lv<32> > tmp_1362_fu_96;
    sc_signal< sc_lv<32> > tmp_1363_fu_100;
    sc_signal< sc_lv<32> > tmp_1364_fu_104;
    sc_signal< sc_lv<32> > tmp_1365_fu_108;
    sc_signal< sc_lv<32> > tmp_1366_fu_112;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > fifo_data_fu_334_p14;
    sc_signal< bool > ap_block_pp2_stage0_01001;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_pp0_stage0;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_pp1_stage0;
    static const sc_lv<7> ap_ST_fsm_pp2_stage0;
    static const sc_lv<7> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<4> ap_const_lv4_D;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_B;
    static const sc_lv<32> ap_const_lv32_6;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_01001();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state6_pp1_stage0_iter0();
    void thread_ap_block_state7_pp1_stage0_iter1();
    void thread_ap_block_state8_pp2_stage0_iter0();
    void thread_ap_block_state9_pp2_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_condition_pp1_exit_iter0_state6();
    void thread_ap_condition_pp2_exit_iter0_state8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_enable_pp2();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_idle_pp2();
    void thread_ap_phi_mux_p_02_0_i_phi_fu_176_p4();
    void thread_ap_phi_mux_p_050_0_i_phi_fu_164_p4();
    void thread_ap_ready();
    void thread_c1_V_fu_208_p2();
    void thread_c2_V_17_fu_202_p2();
    void thread_c2_V_18_fu_220_p2();
    void thread_c2_V_fu_292_p2();
    void thread_fifo_A_in_V_blk_n();
    void thread_fifo_A_in_V_read();
    void thread_fifo_A_local_out_V_blk_n();
    void thread_fifo_A_local_out_V_din();
    void thread_fifo_A_local_out_V_write();
    void thread_fifo_A_out_V_blk_n();
    void thread_fifo_A_out_V_din();
    void thread_fifo_A_out_V_write();
    void thread_icmp_ln115_fu_184_p2();
    void thread_icmp_ln879_fu_190_p2();
    void thread_icmp_ln899_19_fu_214_p2();
    void thread_icmp_ln899_20_fu_196_p2();
    void thread_icmp_ln899_fu_286_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
