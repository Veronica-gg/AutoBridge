-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0_A_IO_L3_in6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_A_AWVALID : OUT STD_LOGIC;
    m_axi_A_AWREADY : IN STD_LOGIC;
    m_axi_A_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_A_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_WVALID : OUT STD_LOGIC;
    m_axi_A_WREADY : IN STD_LOGIC;
    m_axi_A_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_WLAST : OUT STD_LOGIC;
    m_axi_A_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_ARVALID : OUT STD_LOGIC;
    m_axi_A_ARREADY : IN STD_LOGIC;
    m_axi_A_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_A_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_RVALID : IN STD_LOGIC;
    m_axi_A_RREADY : OUT STD_LOGIC;
    m_axi_A_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_A_RLAST : IN STD_LOGIC;
    m_axi_A_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BVALID : IN STD_LOGIC;
    m_axi_A_BREADY : OUT STD_LOGIC;
    m_axi_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_A_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    A_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_A_local_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifo_A_local_out_V_full_n : IN STD_LOGIC;
    fifo_A_local_out_V_write : OUT STD_LOGIC;
    L : IN STD_LOGIC_VECTOR (63 downto 0);
    U : IN STD_LOGIC_VECTOR (63 downto 0);
    L_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    L_out_full_n : IN STD_LOGIC;
    L_out_write : OUT STD_LOGIC;
    U_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    U_out_full_n : IN STD_LOGIC;
    U_out_write : OUT STD_LOGIC );
end;


architecture behav of kernel0_A_IO_L3_in6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln899_reg_295 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_reg_295_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal A_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal icmp_ln899_reg_295_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_A_local_out_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal icmp_ln899_reg_295_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal L_out_blk_n : STD_LOGIC;
    signal U_out_blk_n : STD_LOGIC;
    signal indvar_flatten_i_i_reg_133 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_02_0_i_i_reg_144 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_079_0_i_i_reg_155 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln3_cast_i_i_fu_176_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln3_cast_i_i_reg_290 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln899_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln899_reg_295_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_reg_295_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_reg_295_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_reg_295_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_reg_295_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_reg_295_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln899_fu_186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln215_fu_198_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln215_reg_304 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln215_1_fu_212_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln215_1_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal c2_V_fu_220_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_addr_reg_321 : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_data_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_phi_mux_p_02_0_i_i_phi_fu_148_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln19_1_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_166_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln899_1_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_206_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_i_i_fu_229_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1352_2_i_i_fu_240_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1352_fu_236_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1352_2_fu_247_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_251_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1352_fu_257_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal rhs_V_fu_261_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln215_fu_226_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal ret_V_2_fu_265_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln19_fu_271_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln19_fu_275_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = U_out_full_n) or (ap_const_logic_0 = L_out_full_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif ((not(((ap_const_logic_0 = U_out_full_n) or (ap_const_logic_0 = L_out_full_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_i_i_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln899_fu_180_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_i_i_reg_133 <= add_ln899_fu_186_p2;
            elsif ((not(((ap_const_logic_0 = U_out_full_n) or (ap_const_logic_0 = L_out_full_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_i_i_reg_133 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_02_0_i_i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln899_reg_295 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_02_0_i_i_reg_144 <= select_ln215_1_reg_310;
            elsif ((not(((ap_const_logic_0 = U_out_full_n) or (ap_const_logic_0 = L_out_full_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_02_0_i_i_reg_144 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_079_0_i_i_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln899_fu_180_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_079_0_i_i_reg_155 <= c2_V_fu_220_p2;
            elsif ((not(((ap_const_logic_0 = U_out_full_n) or (ap_const_logic_0 = L_out_full_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_079_0_i_i_reg_155 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln899_reg_295 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    A_addr_reg_321(62 downto 0) <= zext_ln19_1_fu_280_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln899_reg_295_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                fifo_data_reg_327 <= m_axi_A_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln899_reg_295 <= icmp_ln899_fu_180_p2;
                icmp_ln899_reg_295_pp0_iter1_reg <= icmp_ln899_reg_295;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln899_reg_295_pp0_iter2_reg <= icmp_ln899_reg_295_pp0_iter1_reg;
                icmp_ln899_reg_295_pp0_iter3_reg <= icmp_ln899_reg_295_pp0_iter2_reg;
                icmp_ln899_reg_295_pp0_iter4_reg <= icmp_ln899_reg_295_pp0_iter3_reg;
                icmp_ln899_reg_295_pp0_iter5_reg <= icmp_ln899_reg_295_pp0_iter4_reg;
                icmp_ln899_reg_295_pp0_iter6_reg <= icmp_ln899_reg_295_pp0_iter5_reg;
                icmp_ln899_reg_295_pp0_iter7_reg <= icmp_ln899_reg_295_pp0_iter6_reg;
                icmp_ln899_reg_295_pp0_iter8_reg <= icmp_ln899_reg_295_pp0_iter7_reg;
                icmp_ln899_reg_295_pp0_iter9_reg <= icmp_ln899_reg_295_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln899_fu_180_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln215_1_reg_310 <= select_ln215_1_fu_212_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln899_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln215_reg_304 <= select_ln215_fu_198_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = U_out_full_n) or (ap_const_logic_0 = L_out_full_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln3_cast_i_i_reg_290(61 downto 0) <= zext_ln3_cast_i_i_fu_176_p1(61 downto 0);
            end if;
        end if;
    end process;
    zext_ln3_cast_i_i_reg_290(62) <= '0';
    A_addr_reg_321(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, L_out_full_n, U_out_full_n, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, icmp_ln899_fu_180_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = U_out_full_n) or (ap_const_logic_0 = L_out_full_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln899_fu_180_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln899_fu_180_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    A_blk_n_AR_assign_proc : process(m_axi_A_ARREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln899_reg_295_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln899_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            A_blk_n_AR <= m_axi_A_ARREADY;
        else 
            A_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    A_blk_n_R_assign_proc : process(m_axi_A_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, icmp_ln899_reg_295_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln899_reg_295_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            A_blk_n_R <= m_axi_A_RVALID;
        else 
            A_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    L_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, L_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            L_out_blk_n <= L_out_full_n;
        else 
            L_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    L_out_din <= L;

    L_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, L_out_full_n, U_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = U_out_full_n) or (ap_const_logic_0 = L_out_full_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            L_out_write <= ap_const_logic_1;
        else 
            L_out_write <= ap_const_logic_0;
        end if; 
    end process;


    U_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, U_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            U_out_blk_n <= U_out_full_n;
        else 
            U_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    U_out_din <= U;

    U_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, L_out_full_n, U_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = U_out_full_n) or (ap_const_logic_0 = L_out_full_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            U_out_write <= ap_const_logic_1;
        else 
            U_out_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln19_fu_275_p2 <= std_logic_vector(unsigned(zext_ln19_fu_271_p1) + unsigned(zext_ln3_cast_i_i_reg_290));
    add_ln700_fu_206_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_02_0_i_i_phi_fu_148_p4) + unsigned(ap_const_lv4_1));
    add_ln899_fu_186_p2 <= std_logic_vector(unsigned(indvar_flatten_i_i_reg_133) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_A_RVALID, fifo_A_local_out_V_full_n, ap_enable_reg_pp0_iter9, icmp_ln899_reg_295_pp0_iter8_reg, ap_enable_reg_pp0_iter10, icmp_ln899_reg_295_pp0_iter9_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln899_reg_295_pp0_iter9_reg = ap_const_lv1_0) and (fifo_A_local_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((icmp_ln899_reg_295_pp0_iter8_reg = ap_const_lv1_0) and (m_axi_A_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_A_RVALID, fifo_A_local_out_V_full_n, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, icmp_ln899_reg_295_pp0_iter8_reg, ap_enable_reg_pp0_iter10, icmp_ln899_reg_295_pp0_iter9_reg, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln899_reg_295_pp0_iter9_reg = ap_const_lv1_0) and (fifo_A_local_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((icmp_ln899_reg_295_pp0_iter8_reg = ap_const_lv1_0) and (m_axi_A_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_A_RVALID, fifo_A_local_out_V_full_n, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, icmp_ln899_reg_295_pp0_iter8_reg, ap_enable_reg_pp0_iter10, icmp_ln899_reg_295_pp0_iter9_reg, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln899_reg_295_pp0_iter9_reg = ap_const_lv1_0) and (fifo_A_local_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((icmp_ln899_reg_295_pp0_iter8_reg = ap_const_lv1_0) and (m_axi_A_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, L_out_full_n, U_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = U_out_full_n) or (ap_const_logic_0 = L_out_full_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter9_assign_proc : process(m_axi_A_RVALID, icmp_ln899_reg_295_pp0_iter8_reg)
    begin
                ap_block_state11_pp0_stage0_iter9 <= ((icmp_ln899_reg_295_pp0_iter8_reg = ap_const_lv1_0) and (m_axi_A_RVALID = ap_const_logic_0));
    end process;


    ap_block_state12_pp0_stage0_iter10_assign_proc : process(fifo_A_local_out_V_full_n, icmp_ln899_reg_295_pp0_iter9_reg)
    begin
                ap_block_state12_pp0_stage0_iter10 <= ((icmp_ln899_reg_295_pp0_iter9_reg = ap_const_lv1_0) and (fifo_A_local_out_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_A_ARREADY, icmp_ln899_reg_295_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((icmp_ln899_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_A_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln899_fu_180_p2)
    begin
        if ((icmp_ln899_fu_180_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_02_0_i_i_phi_fu_148_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln899_reg_295, p_02_0_i_i_reg_144, ap_CS_fsm_pp0_stage0, select_ln215_1_reg_310, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln899_reg_295 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_p_02_0_i_i_phi_fu_148_p4 <= select_ln215_1_reg_310;
        else 
            ap_phi_mux_p_02_0_i_i_phi_fu_148_p4 <= p_02_0_i_i_reg_144;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c2_V_fu_220_p2 <= std_logic_vector(unsigned(select_ln215_fu_198_p3) + unsigned(ap_const_lv4_1));

    fifo_A_local_out_V_blk_n_assign_proc : process(fifo_A_local_out_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln899_reg_295_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln899_reg_295_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            fifo_A_local_out_V_blk_n <= fifo_A_local_out_V_full_n;
        else 
            fifo_A_local_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_local_out_V_din <= fifo_data_reg_327;

    fifo_A_local_out_V_write_assign_proc : process(ap_enable_reg_pp0_iter10, icmp_ln899_reg_295_pp0_iter9_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln899_reg_295_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_A_local_out_V_write <= ap_const_logic_1;
        else 
            fifo_A_local_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln899_1_fu_192_p2 <= "1" when (p_079_0_i_i_reg_155 = ap_const_lv4_C) else "0";
    icmp_ln899_fu_180_p2 <= "1" when (indvar_flatten_i_i_reg_133 = ap_const_lv8_90) else "0";
    m_axi_A_ARADDR <= A_addr_reg_321;
    m_axi_A_ARBURST <= ap_const_lv2_0;
    m_axi_A_ARCACHE <= ap_const_lv4_0;
    m_axi_A_ARID <= ap_const_lv1_0;
    m_axi_A_ARLEN <= ap_const_lv32_1;
    m_axi_A_ARLOCK <= ap_const_lv2_0;
    m_axi_A_ARPROT <= ap_const_lv3_0;
    m_axi_A_ARQOS <= ap_const_lv4_0;
    m_axi_A_ARREGION <= ap_const_lv4_0;
    m_axi_A_ARSIZE <= ap_const_lv3_0;
    m_axi_A_ARUSER <= ap_const_lv1_0;

    m_axi_A_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln899_reg_295_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln899_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_A_ARVALID <= ap_const_logic_1;
        else 
            m_axi_A_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_A_AWADDR <= ap_const_lv64_0;
    m_axi_A_AWBURST <= ap_const_lv2_0;
    m_axi_A_AWCACHE <= ap_const_lv4_0;
    m_axi_A_AWID <= ap_const_lv1_0;
    m_axi_A_AWLEN <= ap_const_lv32_0;
    m_axi_A_AWLOCK <= ap_const_lv2_0;
    m_axi_A_AWPROT <= ap_const_lv3_0;
    m_axi_A_AWQOS <= ap_const_lv4_0;
    m_axi_A_AWREGION <= ap_const_lv4_0;
    m_axi_A_AWSIZE <= ap_const_lv3_0;
    m_axi_A_AWUSER <= ap_const_lv1_0;
    m_axi_A_AWVALID <= ap_const_logic_0;
    m_axi_A_BREADY <= ap_const_logic_0;

    m_axi_A_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln899_reg_295_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln899_reg_295_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_A_RREADY <= ap_const_logic_1;
        else 
            m_axi_A_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_A_WDATA <= ap_const_lv32_0;
    m_axi_A_WID <= ap_const_lv1_0;
    m_axi_A_WLAST <= ap_const_logic_0;
    m_axi_A_WSTRB <= ap_const_lv4_0;
    m_axi_A_WUSER <= ap_const_lv1_0;
    m_axi_A_WVALID <= ap_const_logic_0;
    ret_V_2_fu_265_p2 <= std_logic_vector(unsigned(rhs_V_fu_261_p1) + unsigned(zext_ln215_fu_226_p1));
    ret_V_fu_251_p2 <= std_logic_vector(unsigned(zext_ln1352_fu_236_p1) - unsigned(zext_ln1352_2_fu_247_p1));
    rhs_V_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1352_fu_257_p1),38));
    select_ln215_1_fu_212_p3 <= 
        add_ln700_fu_206_p2 when (icmp_ln899_1_fu_192_p2(0) = '1') else 
        ap_phi_mux_p_02_0_i_i_phi_fu_148_p4;
    select_ln215_fu_198_p3 <= 
        ap_const_lv4_0 when (icmp_ln899_1_fu_192_p2(0) = '1') else 
        p_079_0_i_i_reg_155;
        sext_ln1352_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_251_p2),37));

    shl_ln1352_2_i_i_fu_240_p3 <= (select_ln215_reg_304 & ap_const_lv2_0);
    shl_ln_i_i_fu_229_p3 <= (select_ln215_reg_304 & ap_const_lv4_0);
    tmp_fu_166_p4 <= A_offset(63 downto 2);
    zext_ln1352_2_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1352_2_i_i_fu_240_p3),9));
    zext_ln1352_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_i_i_fu_229_p3),9));
    zext_ln19_1_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_fu_275_p2),64));
    zext_ln19_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_265_p2),63));
    zext_ln215_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln215_1_reg_310),38));
    zext_ln3_cast_i_i_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_166_p4),63));
end behav;
