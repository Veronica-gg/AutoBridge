// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel0_A_IO_L3_in6_HH_
#define _kernel0_A_IO_L3_in6_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct kernel0_A_IO_L3_in6 : public sc_module {
    // Port declarations 64
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_A_AWVALID;
    sc_in< sc_logic > m_axi_A_AWREADY;
    sc_out< sc_lv<64> > m_axi_A_AWADDR;
    sc_out< sc_lv<1> > m_axi_A_AWID;
    sc_out< sc_lv<32> > m_axi_A_AWLEN;
    sc_out< sc_lv<3> > m_axi_A_AWSIZE;
    sc_out< sc_lv<2> > m_axi_A_AWBURST;
    sc_out< sc_lv<2> > m_axi_A_AWLOCK;
    sc_out< sc_lv<4> > m_axi_A_AWCACHE;
    sc_out< sc_lv<3> > m_axi_A_AWPROT;
    sc_out< sc_lv<4> > m_axi_A_AWQOS;
    sc_out< sc_lv<4> > m_axi_A_AWREGION;
    sc_out< sc_lv<1> > m_axi_A_AWUSER;
    sc_out< sc_logic > m_axi_A_WVALID;
    sc_in< sc_logic > m_axi_A_WREADY;
    sc_out< sc_lv<32> > m_axi_A_WDATA;
    sc_out< sc_lv<4> > m_axi_A_WSTRB;
    sc_out< sc_logic > m_axi_A_WLAST;
    sc_out< sc_lv<1> > m_axi_A_WID;
    sc_out< sc_lv<1> > m_axi_A_WUSER;
    sc_out< sc_logic > m_axi_A_ARVALID;
    sc_in< sc_logic > m_axi_A_ARREADY;
    sc_out< sc_lv<64> > m_axi_A_ARADDR;
    sc_out< sc_lv<1> > m_axi_A_ARID;
    sc_out< sc_lv<32> > m_axi_A_ARLEN;
    sc_out< sc_lv<3> > m_axi_A_ARSIZE;
    sc_out< sc_lv<2> > m_axi_A_ARBURST;
    sc_out< sc_lv<2> > m_axi_A_ARLOCK;
    sc_out< sc_lv<4> > m_axi_A_ARCACHE;
    sc_out< sc_lv<3> > m_axi_A_ARPROT;
    sc_out< sc_lv<4> > m_axi_A_ARQOS;
    sc_out< sc_lv<4> > m_axi_A_ARREGION;
    sc_out< sc_lv<1> > m_axi_A_ARUSER;
    sc_in< sc_logic > m_axi_A_RVALID;
    sc_out< sc_logic > m_axi_A_RREADY;
    sc_in< sc_lv<32> > m_axi_A_RDATA;
    sc_in< sc_logic > m_axi_A_RLAST;
    sc_in< sc_lv<1> > m_axi_A_RID;
    sc_in< sc_lv<1> > m_axi_A_RUSER;
    sc_in< sc_lv<2> > m_axi_A_RRESP;
    sc_in< sc_logic > m_axi_A_BVALID;
    sc_out< sc_logic > m_axi_A_BREADY;
    sc_in< sc_lv<2> > m_axi_A_BRESP;
    sc_in< sc_lv<1> > m_axi_A_BID;
    sc_in< sc_lv<1> > m_axi_A_BUSER;
    sc_in< sc_lv<64> > A_offset;
    sc_out< sc_lv<32> > fifo_A_local_out_V_din;
    sc_in< sc_logic > fifo_A_local_out_V_full_n;
    sc_out< sc_logic > fifo_A_local_out_V_write;
    sc_in< sc_lv<64> > L;
    sc_in< sc_lv<64> > U;
    sc_out< sc_lv<64> > L_out_din;
    sc_in< sc_logic > L_out_full_n;
    sc_out< sc_logic > L_out_write;
    sc_out< sc_lv<64> > U_out_din;
    sc_in< sc_logic > U_out_full_n;
    sc_out< sc_logic > U_out_write;


    // Module declarations
    kernel0_A_IO_L3_in6(sc_module_name name);
    SC_HAS_PROCESS(kernel0_A_IO_L3_in6);

    ~kernel0_A_IO_L3_in6();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > A_blk_n_AR;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln899_reg_295;
    sc_signal< sc_lv<1> > icmp_ln899_reg_295_pp0_iter1_reg;
    sc_signal< sc_logic > A_blk_n_R;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_lv<1> > icmp_ln899_reg_295_pp0_iter8_reg;
    sc_signal< sc_logic > fifo_A_local_out_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< sc_lv<1> > icmp_ln899_reg_295_pp0_iter9_reg;
    sc_signal< sc_logic > L_out_blk_n;
    sc_signal< sc_logic > U_out_blk_n;
    sc_signal< sc_lv<8> > indvar_flatten_i_i_reg_133;
    sc_signal< sc_lv<4> > p_02_0_i_i_reg_144;
    sc_signal< sc_lv<4> > p_079_0_i_i_reg_155;
    sc_signal< sc_lv<63> > zext_ln3_cast_i_i_fu_176_p1;
    sc_signal< sc_lv<63> > zext_ln3_cast_i_i_reg_290;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln899_fu_180_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter10;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln899_reg_295_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln899_reg_295_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln899_reg_295_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln899_reg_295_pp0_iter5_reg;
    sc_signal< sc_lv<1> > icmp_ln899_reg_295_pp0_iter6_reg;
    sc_signal< sc_lv<1> > icmp_ln899_reg_295_pp0_iter7_reg;
    sc_signal< sc_lv<8> > add_ln899_fu_186_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > select_ln215_fu_198_p3;
    sc_signal< sc_lv<4> > select_ln215_reg_304;
    sc_signal< sc_lv<4> > select_ln215_1_fu_212_p3;
    sc_signal< sc_lv<4> > select_ln215_1_reg_310;
    sc_signal< sc_lv<4> > c2_V_fu_220_p2;
    sc_signal< sc_lv<64> > A_addr_reg_321;
    sc_signal< sc_lv<32> > fifo_data_reg_327;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_lv<4> > ap_phi_mux_p_02_0_i_i_phi_fu_148_p4;
    sc_signal< sc_lv<64> > zext_ln19_1_fu_280_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<62> > tmp_fu_166_p4;
    sc_signal< sc_lv<1> > icmp_ln899_1_fu_192_p2;
    sc_signal< sc_lv<4> > add_ln700_fu_206_p2;
    sc_signal< sc_lv<8> > shl_ln_i_i_fu_229_p3;
    sc_signal< sc_lv<6> > shl_ln1352_2_i_i_fu_240_p3;
    sc_signal< sc_lv<9> > zext_ln1352_fu_236_p1;
    sc_signal< sc_lv<9> > zext_ln1352_2_fu_247_p1;
    sc_signal< sc_lv<9> > ret_V_fu_251_p2;
    sc_signal< sc_lv<37> > sext_ln1352_fu_257_p1;
    sc_signal< sc_lv<38> > rhs_V_fu_261_p1;
    sc_signal< sc_lv<38> > zext_ln215_fu_226_p1;
    sc_signal< sc_lv<38> > ret_V_2_fu_265_p2;
    sc_signal< sc_lv<63> > zext_ln19_fu_271_p1;
    sc_signal< sc_lv<63> > add_ln19_fu_275_p2;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state13;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<8> ap_const_lv8_90;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_blk_n_AR();
    void thread_A_blk_n_R();
    void thread_L_out_blk_n();
    void thread_L_out_din();
    void thread_L_out_write();
    void thread_U_out_blk_n();
    void thread_U_out_din();
    void thread_U_out_write();
    void thread_add_ln19_fu_275_p2();
    void thread_add_ln700_fu_206_p2();
    void thread_add_ln899_fu_186_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state13();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state11_pp0_stage0_iter9();
    void thread_ap_block_state12_pp0_stage0_iter10();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_p_02_0_i_i_phi_fu_148_p4();
    void thread_ap_ready();
    void thread_c2_V_fu_220_p2();
    void thread_fifo_A_local_out_V_blk_n();
    void thread_fifo_A_local_out_V_din();
    void thread_fifo_A_local_out_V_write();
    void thread_icmp_ln899_1_fu_192_p2();
    void thread_icmp_ln899_fu_180_p2();
    void thread_m_axi_A_ARADDR();
    void thread_m_axi_A_ARBURST();
    void thread_m_axi_A_ARCACHE();
    void thread_m_axi_A_ARID();
    void thread_m_axi_A_ARLEN();
    void thread_m_axi_A_ARLOCK();
    void thread_m_axi_A_ARPROT();
    void thread_m_axi_A_ARQOS();
    void thread_m_axi_A_ARREGION();
    void thread_m_axi_A_ARSIZE();
    void thread_m_axi_A_ARUSER();
    void thread_m_axi_A_ARVALID();
    void thread_m_axi_A_AWADDR();
    void thread_m_axi_A_AWBURST();
    void thread_m_axi_A_AWCACHE();
    void thread_m_axi_A_AWID();
    void thread_m_axi_A_AWLEN();
    void thread_m_axi_A_AWLOCK();
    void thread_m_axi_A_AWPROT();
    void thread_m_axi_A_AWQOS();
    void thread_m_axi_A_AWREGION();
    void thread_m_axi_A_AWSIZE();
    void thread_m_axi_A_AWUSER();
    void thread_m_axi_A_AWVALID();
    void thread_m_axi_A_BREADY();
    void thread_m_axi_A_RREADY();
    void thread_m_axi_A_WDATA();
    void thread_m_axi_A_WID();
    void thread_m_axi_A_WLAST();
    void thread_m_axi_A_WSTRB();
    void thread_m_axi_A_WUSER();
    void thread_m_axi_A_WVALID();
    void thread_ret_V_2_fu_265_p2();
    void thread_ret_V_fu_251_p2();
    void thread_rhs_V_fu_261_p1();
    void thread_select_ln215_1_fu_212_p3();
    void thread_select_ln215_fu_198_p3();
    void thread_sext_ln1352_fu_257_p1();
    void thread_shl_ln1352_2_i_i_fu_240_p3();
    void thread_shl_ln_i_i_fu_229_p3();
    void thread_tmp_fu_166_p4();
    void thread_zext_ln1352_2_fu_247_p1();
    void thread_zext_ln1352_fu_236_p1();
    void thread_zext_ln19_1_fu_280_p1();
    void thread_zext_ln19_fu_271_p1();
    void thread_zext_ln215_fu_226_p1();
    void thread_zext_ln3_cast_i_i_fu_176_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
