// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel0_U_drain_IO_L3_out.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel0_U_drain_IO_L3_out::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel0_U_drain_IO_L3_out::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> kernel0_U_drain_IO_L3_out::ap_ST_fsm_state1 = "1";
const sc_lv<9> kernel0_U_drain_IO_L3_out::ap_ST_fsm_state2 = "10";
const sc_lv<9> kernel0_U_drain_IO_L3_out::ap_ST_fsm_state3 = "100";
const sc_lv<9> kernel0_U_drain_IO_L3_out::ap_ST_fsm_pp0_stage0 = "1000";
const sc_lv<9> kernel0_U_drain_IO_L3_out::ap_ST_fsm_state7 = "10000";
const sc_lv<9> kernel0_U_drain_IO_L3_out::ap_ST_fsm_state8 = "100000";
const sc_lv<9> kernel0_U_drain_IO_L3_out::ap_ST_fsm_state9 = "1000000";
const sc_lv<9> kernel0_U_drain_IO_L3_out::ap_ST_fsm_state10 = "10000000";
const sc_lv<9> kernel0_U_drain_IO_L3_out::ap_ST_fsm_state11 = "100000000";
const sc_lv<32> kernel0_U_drain_IO_L3_out::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool kernel0_U_drain_IO_L3_out::ap_const_boolean_1 = true;
const sc_lv<64> kernel0_U_drain_IO_L3_out::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> kernel0_U_drain_IO_L3_out::ap_const_lv1_0 = "0";
const sc_lv<3> kernel0_U_drain_IO_L3_out::ap_const_lv3_0 = "000";
const sc_lv<2> kernel0_U_drain_IO_L3_out::ap_const_lv2_0 = "00";
const sc_lv<4> kernel0_U_drain_IO_L3_out::ap_const_lv4_0 = "0000";
const sc_lv<32> kernel0_U_drain_IO_L3_out::ap_const_lv32_2 = "10";
const bool kernel0_U_drain_IO_L3_out::ap_const_boolean_0 = false;
const sc_lv<32> kernel0_U_drain_IO_L3_out::ap_const_lv32_8 = "1000";
const sc_lv<32> kernel0_U_drain_IO_L3_out::ap_const_lv32_3 = "11";
const sc_lv<32> kernel0_U_drain_IO_L3_out::ap_const_lv32_1 = "1";
const sc_lv<32> kernel0_U_drain_IO_L3_out::ap_const_lv32_4 = "100";
const sc_lv<1> kernel0_U_drain_IO_L3_out::ap_const_lv1_1 = "1";
const sc_lv<4> kernel0_U_drain_IO_L3_out::ap_const_lv4_C = "1100";
const sc_lv<8> kernel0_U_drain_IO_L3_out::ap_const_lv8_0 = "00000000";
const sc_lv<4> kernel0_U_drain_IO_L3_out::ap_const_lv4_F = "1111";
const sc_lv<32> kernel0_U_drain_IO_L3_out::ap_const_lv32_3F = "111111";
const sc_lv<8> kernel0_U_drain_IO_L3_out::ap_const_lv8_D = "1101";
const sc_lv<4> kernel0_U_drain_IO_L3_out::ap_const_lv4_1 = "1";
const sc_lv<4> kernel0_U_drain_IO_L3_out::ap_const_lv4_B = "1011";

kernel0_U_drain_IO_L3_out::kernel0_U_drain_IO_L3_out(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_U_blk_n_AW);
    sensitive << ( m_axi_U_AWREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_U_blk_n_B);
    sensitive << ( m_axi_U_BVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_U_blk_n_W);
    sensitive << ( m_axi_U_WREADY );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln764_reg_252_pp0_iter1_reg );

    SC_METHOD(thread_U_offset_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( U_offset_empty_n );

    SC_METHOD(thread_U_offset_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( U_offset_empty_n );

    SC_METHOD(thread_add_ln759_1_fu_217_p2);
    sensitive << ( indvars_iv_i_reg_99 );

    SC_METHOD(thread_add_ln759_fu_158_p2);
    sensitive << ( phi_mul_i_reg_122 );

    SC_METHOD(thread_add_ln769_fu_186_p2);
    sensitive << ( zext_ln752_cast_i_reg_223 );
    sensitive << ( zext_ln769_fu_182_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( fifo_U_drain_local_in_V_empty_n );
    sensitive << ( icmp_ln764_reg_252 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( fifo_U_drain_local_in_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln764_reg_252 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state6_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( fifo_U_drain_local_in_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln764_reg_252 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state6_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( U_offset_empty_n );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter1);
    sensitive << ( fifo_U_drain_local_in_V_empty_n );
    sensitive << ( icmp_ln764_reg_252 );

    SC_METHOD(thread_ap_block_state6_io);
    sensitive << ( m_axi_U_WREADY );
    sensitive << ( icmp_ln764_reg_252_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state4);
    sensitive << ( icmp_ln764_fu_205_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln759_fu_164_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln759_fu_164_p2 );

    SC_METHOD(thread_c0_V_fu_170_p2);
    sensitive << ( p_0102_0_i_reg_111 );

    SC_METHOD(thread_c3_fu_211_p2);
    sensitive << ( i_op_assign_i_reg_133 );

    SC_METHOD(thread_fifo_U_drain_local_in_V_blk_n);
    sensitive << ( fifo_U_drain_local_in_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln764_reg_252 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_fifo_U_drain_local_in_V_read);
    sensitive << ( icmp_ln764_reg_252 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln759_fu_164_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_0102_0_i_reg_111 );

    SC_METHOD(thread_icmp_ln764_fu_205_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_op_assign_i_reg_133 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indvars_iv_i_reg_99 );

    SC_METHOD(thread_m_axi_U_ARADDR);

    SC_METHOD(thread_m_axi_U_ARBURST);

    SC_METHOD(thread_m_axi_U_ARCACHE);

    SC_METHOD(thread_m_axi_U_ARID);

    SC_METHOD(thread_m_axi_U_ARLEN);

    SC_METHOD(thread_m_axi_U_ARLOCK);

    SC_METHOD(thread_m_axi_U_ARPROT);

    SC_METHOD(thread_m_axi_U_ARQOS);

    SC_METHOD(thread_m_axi_U_ARREGION);

    SC_METHOD(thread_m_axi_U_ARSIZE);

    SC_METHOD(thread_m_axi_U_ARUSER);

    SC_METHOD(thread_m_axi_U_ARVALID);

    SC_METHOD(thread_m_axi_U_AWADDR);
    sensitive << ( m_axi_U_AWREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( U_addr_reg_246 );

    SC_METHOD(thread_m_axi_U_AWBURST);

    SC_METHOD(thread_m_axi_U_AWCACHE);

    SC_METHOD(thread_m_axi_U_AWID);

    SC_METHOD(thread_m_axi_U_AWLEN);
    sensitive << ( m_axi_U_AWREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ret_V_reg_241 );

    SC_METHOD(thread_m_axi_U_AWLOCK);

    SC_METHOD(thread_m_axi_U_AWPROT);

    SC_METHOD(thread_m_axi_U_AWQOS);

    SC_METHOD(thread_m_axi_U_AWREGION);

    SC_METHOD(thread_m_axi_U_AWSIZE);

    SC_METHOD(thread_m_axi_U_AWUSER);

    SC_METHOD(thread_m_axi_U_AWVALID);
    sensitive << ( m_axi_U_AWREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_m_axi_U_BREADY);
    sensitive << ( m_axi_U_BVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_m_axi_U_RREADY);

    SC_METHOD(thread_m_axi_U_WDATA);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln764_reg_252_pp0_iter1_reg );
    sensitive << ( tmp_2_reg_261 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_U_WID);

    SC_METHOD(thread_m_axi_U_WLAST);

    SC_METHOD(thread_m_axi_U_WSTRB);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln764_reg_252_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_U_WUSER);

    SC_METHOD(thread_m_axi_U_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln764_reg_252_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ret_V_fu_176_p2);
    sensitive << ( p_0102_0_i_reg_111 );

    SC_METHOD(thread_tmp_fu_144_p4);
    sensitive << ( U_offset_dout );

    SC_METHOD(thread_zext_ln752_cast_i_fu_154_p1);
    sensitive << ( tmp_fu_144_p4 );

    SC_METHOD(thread_zext_ln769_1_fu_191_p1);
    sensitive << ( add_ln769_fu_186_p2 );

    SC_METHOD(thread_zext_ln769_fu_182_p1);
    sensitive << ( phi_mul_i_reg_122 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_U_AWREADY );
    sensitive << ( m_axi_U_BVALID );
    sensitive << ( U_offset_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln759_fu_164_p2 );
    sensitive << ( icmp_ln764_fu_205_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000000001";
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel0_U_drain_IO_L3_out_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_U_AWVALID, "(port)m_axi_U_AWVALID");
    sc_trace(mVcdFile, m_axi_U_AWREADY, "(port)m_axi_U_AWREADY");
    sc_trace(mVcdFile, m_axi_U_AWADDR, "(port)m_axi_U_AWADDR");
    sc_trace(mVcdFile, m_axi_U_AWID, "(port)m_axi_U_AWID");
    sc_trace(mVcdFile, m_axi_U_AWLEN, "(port)m_axi_U_AWLEN");
    sc_trace(mVcdFile, m_axi_U_AWSIZE, "(port)m_axi_U_AWSIZE");
    sc_trace(mVcdFile, m_axi_U_AWBURST, "(port)m_axi_U_AWBURST");
    sc_trace(mVcdFile, m_axi_U_AWLOCK, "(port)m_axi_U_AWLOCK");
    sc_trace(mVcdFile, m_axi_U_AWCACHE, "(port)m_axi_U_AWCACHE");
    sc_trace(mVcdFile, m_axi_U_AWPROT, "(port)m_axi_U_AWPROT");
    sc_trace(mVcdFile, m_axi_U_AWQOS, "(port)m_axi_U_AWQOS");
    sc_trace(mVcdFile, m_axi_U_AWREGION, "(port)m_axi_U_AWREGION");
    sc_trace(mVcdFile, m_axi_U_AWUSER, "(port)m_axi_U_AWUSER");
    sc_trace(mVcdFile, m_axi_U_WVALID, "(port)m_axi_U_WVALID");
    sc_trace(mVcdFile, m_axi_U_WREADY, "(port)m_axi_U_WREADY");
    sc_trace(mVcdFile, m_axi_U_WDATA, "(port)m_axi_U_WDATA");
    sc_trace(mVcdFile, m_axi_U_WSTRB, "(port)m_axi_U_WSTRB");
    sc_trace(mVcdFile, m_axi_U_WLAST, "(port)m_axi_U_WLAST");
    sc_trace(mVcdFile, m_axi_U_WID, "(port)m_axi_U_WID");
    sc_trace(mVcdFile, m_axi_U_WUSER, "(port)m_axi_U_WUSER");
    sc_trace(mVcdFile, m_axi_U_ARVALID, "(port)m_axi_U_ARVALID");
    sc_trace(mVcdFile, m_axi_U_ARREADY, "(port)m_axi_U_ARREADY");
    sc_trace(mVcdFile, m_axi_U_ARADDR, "(port)m_axi_U_ARADDR");
    sc_trace(mVcdFile, m_axi_U_ARID, "(port)m_axi_U_ARID");
    sc_trace(mVcdFile, m_axi_U_ARLEN, "(port)m_axi_U_ARLEN");
    sc_trace(mVcdFile, m_axi_U_ARSIZE, "(port)m_axi_U_ARSIZE");
    sc_trace(mVcdFile, m_axi_U_ARBURST, "(port)m_axi_U_ARBURST");
    sc_trace(mVcdFile, m_axi_U_ARLOCK, "(port)m_axi_U_ARLOCK");
    sc_trace(mVcdFile, m_axi_U_ARCACHE, "(port)m_axi_U_ARCACHE");
    sc_trace(mVcdFile, m_axi_U_ARPROT, "(port)m_axi_U_ARPROT");
    sc_trace(mVcdFile, m_axi_U_ARQOS, "(port)m_axi_U_ARQOS");
    sc_trace(mVcdFile, m_axi_U_ARREGION, "(port)m_axi_U_ARREGION");
    sc_trace(mVcdFile, m_axi_U_ARUSER, "(port)m_axi_U_ARUSER");
    sc_trace(mVcdFile, m_axi_U_RVALID, "(port)m_axi_U_RVALID");
    sc_trace(mVcdFile, m_axi_U_RREADY, "(port)m_axi_U_RREADY");
    sc_trace(mVcdFile, m_axi_U_RDATA, "(port)m_axi_U_RDATA");
    sc_trace(mVcdFile, m_axi_U_RLAST, "(port)m_axi_U_RLAST");
    sc_trace(mVcdFile, m_axi_U_RID, "(port)m_axi_U_RID");
    sc_trace(mVcdFile, m_axi_U_RUSER, "(port)m_axi_U_RUSER");
    sc_trace(mVcdFile, m_axi_U_RRESP, "(port)m_axi_U_RRESP");
    sc_trace(mVcdFile, m_axi_U_BVALID, "(port)m_axi_U_BVALID");
    sc_trace(mVcdFile, m_axi_U_BREADY, "(port)m_axi_U_BREADY");
    sc_trace(mVcdFile, m_axi_U_BRESP, "(port)m_axi_U_BRESP");
    sc_trace(mVcdFile, m_axi_U_BID, "(port)m_axi_U_BID");
    sc_trace(mVcdFile, m_axi_U_BUSER, "(port)m_axi_U_BUSER");
    sc_trace(mVcdFile, U_offset_dout, "(port)U_offset_dout");
    sc_trace(mVcdFile, U_offset_empty_n, "(port)U_offset_empty_n");
    sc_trace(mVcdFile, U_offset_read, "(port)U_offset_read");
    sc_trace(mVcdFile, fifo_U_drain_local_in_V_dout, "(port)fifo_U_drain_local_in_V_dout");
    sc_trace(mVcdFile, fifo_U_drain_local_in_V_empty_n, "(port)fifo_U_drain_local_in_V_empty_n");
    sc_trace(mVcdFile, fifo_U_drain_local_in_V_read, "(port)fifo_U_drain_local_in_V_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, U_blk_n_AW, "U_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, U_blk_n_W, "U_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln764_reg_252, "icmp_ln764_reg_252");
    sc_trace(mVcdFile, icmp_ln764_reg_252_pp0_iter1_reg, "icmp_ln764_reg_252_pp0_iter1_reg");
    sc_trace(mVcdFile, U_blk_n_B, "U_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, U_offset_blk_n, "U_offset_blk_n");
    sc_trace(mVcdFile, fifo_U_drain_local_in_V_blk_n, "fifo_U_drain_local_in_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, i_op_assign_i_reg_133, "i_op_assign_i_reg_133");
    sc_trace(mVcdFile, zext_ln752_cast_i_fu_154_p1, "zext_ln752_cast_i_fu_154_p1");
    sc_trace(mVcdFile, zext_ln752_cast_i_reg_223, "zext_ln752_cast_i_reg_223");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, add_ln759_fu_158_p2, "add_ln759_fu_158_p2");
    sc_trace(mVcdFile, add_ln759_reg_228, "add_ln759_reg_228");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, c0_V_fu_170_p2, "c0_V_fu_170_p2");
    sc_trace(mVcdFile, c0_V_reg_236, "c0_V_reg_236");
    sc_trace(mVcdFile, ret_V_fu_176_p2, "ret_V_fu_176_p2");
    sc_trace(mVcdFile, ret_V_reg_241, "ret_V_reg_241");
    sc_trace(mVcdFile, icmp_ln759_fu_164_p2, "icmp_ln759_fu_164_p2");
    sc_trace(mVcdFile, U_addr_reg_246, "U_addr_reg_246");
    sc_trace(mVcdFile, icmp_ln764_fu_205_p2, "icmp_ln764_fu_205_p2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter0, "ap_block_state4_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter1, "ap_block_state5_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter2, "ap_block_state6_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state6_io, "ap_block_state6_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, c3_fu_211_p2, "c3_fu_211_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_2_reg_261, "tmp_2_reg_261");
    sc_trace(mVcdFile, add_ln759_1_fu_217_p2, "add_ln759_1_fu_217_p2");
    sc_trace(mVcdFile, add_ln759_1_reg_266, "add_ln759_1_reg_266");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state4, "ap_condition_pp0_exit_iter0_state4");
    sc_trace(mVcdFile, indvars_iv_i_reg_99, "indvars_iv_i_reg_99");
    sc_trace(mVcdFile, p_0102_0_i_reg_111, "p_0102_0_i_reg_111");
    sc_trace(mVcdFile, phi_mul_i_reg_122, "phi_mul_i_reg_122");
    sc_trace(mVcdFile, zext_ln769_1_fu_191_p1, "zext_ln769_1_fu_191_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_fu_144_p4, "tmp_fu_144_p4");
    sc_trace(mVcdFile, zext_ln769_fu_182_p1, "zext_ln769_fu_182_p1");
    sc_trace(mVcdFile, add_ln769_fu_186_p2, "add_ln769_fu_186_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

kernel0_U_drain_IO_L3_out::~kernel0_U_drain_IO_L3_out() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void kernel0_U_drain_IO_L3_out::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln759_fu_164_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state4.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(m_axi_U_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state4.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state4.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(m_axi_U_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(m_axi_U_AWREADY.read(), ap_const_logic_1))) {
        i_op_assign_i_reg_133 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln764_fu_205_p2.read()))) {
        i_op_assign_i_reg_133 = c3_fu_211_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, U_offset_empty_n.read())))) {
        indvars_iv_i_reg_99 = ap_const_lv4_C;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(m_axi_U_BVALID.read(), ap_const_logic_1))) {
        indvars_iv_i_reg_99 = add_ln759_1_reg_266.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, U_offset_empty_n.read())))) {
        p_0102_0_i_reg_111 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(m_axi_U_BVALID.read(), ap_const_logic_1))) {
        p_0102_0_i_reg_111 = c0_V_reg_236.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, U_offset_empty_n.read())))) {
        phi_mul_i_reg_122 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(m_axi_U_BVALID.read(), ap_const_logic_1))) {
        phi_mul_i_reg_122 = add_ln759_reg_228.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln759_fu_164_p2.read()))) {
        U_addr_reg_246 = zext_ln769_1_fu_191_p1.read();
        ret_V_reg_241 = ret_V_fu_176_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        add_ln759_1_reg_266 = add_ln759_1_fu_217_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln759_reg_228 = add_ln759_fu_158_p2.read();
        c0_V_reg_236 = c0_V_fu_170_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln764_reg_252 = icmp_ln764_fu_205_p2.read();
        icmp_ln764_reg_252_pp0_iter1_reg = icmp_ln764_reg_252.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln764_reg_252.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_2_reg_261 = fifo_U_drain_local_in_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, U_offset_empty_n.read())))) {
        zext_ln752_cast_i_reg_223 = zext_ln752_cast_i_fu_154_p1.read();
    }
}

void kernel0_U_drain_IO_L3_out::thread_U_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        U_blk_n_AW = m_axi_U_AWREADY.read();
    } else {
        U_blk_n_AW = ap_const_logic_1;
    }
}

void kernel0_U_drain_IO_L3_out::thread_U_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        U_blk_n_B = m_axi_U_BVALID.read();
    } else {
        U_blk_n_B = ap_const_logic_1;
    }
}

void kernel0_U_drain_IO_L3_out::thread_U_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln764_reg_252_pp0_iter1_reg.read()))) {
        U_blk_n_W = m_axi_U_WREADY.read();
    } else {
        U_blk_n_W = ap_const_logic_1;
    }
}

void kernel0_U_drain_IO_L3_out::thread_U_offset_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        U_offset_blk_n = U_offset_empty_n.read();
    } else {
        U_offset_blk_n = ap_const_logic_1;
    }
}

void kernel0_U_drain_IO_L3_out::thread_U_offset_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, U_offset_empty_n.read())))) {
        U_offset_read = ap_const_logic_1;
    } else {
        U_offset_read = ap_const_logic_0;
    }
}

void kernel0_U_drain_IO_L3_out::thread_add_ln759_1_fu_217_p2() {
    add_ln759_1_fu_217_p2 = (!indvars_iv_i_reg_99.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<4>(): (sc_biguint<4>(indvars_iv_i_reg_99.read()) + sc_bigint<4>(ap_const_lv4_F));
}

void kernel0_U_drain_IO_L3_out::thread_add_ln759_fu_158_p2() {
    add_ln759_fu_158_p2 = (!phi_mul_i_reg_122.read().is_01() || !ap_const_lv8_D.is_01())? sc_lv<8>(): (sc_biguint<8>(phi_mul_i_reg_122.read()) + sc_biguint<8>(ap_const_lv8_D));
}

void kernel0_U_drain_IO_L3_out::thread_add_ln769_fu_186_p2() {
    add_ln769_fu_186_p2 = (!zext_ln752_cast_i_reg_223.read().is_01() || !zext_ln769_fu_182_p1.read().is_01())? sc_lv<63>(): (sc_biguint<63>(zext_ln752_cast_i_reg_223.read()) + sc_biguint<63>(zext_ln769_fu_182_p1.read()));
}

void kernel0_U_drain_IO_L3_out::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[3];
}

void kernel0_U_drain_IO_L3_out::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kernel0_U_drain_IO_L3_out::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[8];
}

void kernel0_U_drain_IO_L3_out::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void kernel0_U_drain_IO_L3_out::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void kernel0_U_drain_IO_L3_out::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[4];
}

void kernel0_U_drain_IO_L3_out::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel0_U_drain_IO_L3_out::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln764_reg_252.read()) && esl_seteq<1,1,1>(ap_const_logic_0, fifo_U_drain_local_in_V_empty_n.read()));
}

void kernel0_U_drain_IO_L3_out::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln764_reg_252.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fifo_U_drain_local_in_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state6_io.read())));
}

void kernel0_U_drain_IO_L3_out::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln764_reg_252.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fifo_U_drain_local_in_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state6_io.read())));
}

void kernel0_U_drain_IO_L3_out::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, U_offset_empty_n.read()));
}

void kernel0_U_drain_IO_L3_out::thread_ap_block_state4_pp0_stage0_iter0() {
    ap_block_state4_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel0_U_drain_IO_L3_out::thread_ap_block_state5_pp0_stage0_iter1() {
    ap_block_state5_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln764_reg_252.read()) && esl_seteq<1,1,1>(ap_const_logic_0, fifo_U_drain_local_in_V_empty_n.read()));
}

void kernel0_U_drain_IO_L3_out::thread_ap_block_state6_io() {
    ap_block_state6_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln764_reg_252_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_U_WREADY.read()));
}

void kernel0_U_drain_IO_L3_out::thread_ap_block_state6_pp0_stage0_iter2() {
    ap_block_state6_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel0_U_drain_IO_L3_out::thread_ap_condition_pp0_exit_iter0_state4() {
    if (esl_seteq<1,1,1>(icmp_ln764_fu_205_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state4 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state4 = ap_const_logic_0;
    }
}

void kernel0_U_drain_IO_L3_out::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln759_fu_164_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void kernel0_U_drain_IO_L3_out::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void kernel0_U_drain_IO_L3_out::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel0_U_drain_IO_L3_out::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void kernel0_U_drain_IO_L3_out::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln759_fu_164_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel0_U_drain_IO_L3_out::thread_c0_V_fu_170_p2() {
    c0_V_fu_170_p2 = (!p_0102_0_i_reg_111.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(p_0102_0_i_reg_111.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void kernel0_U_drain_IO_L3_out::thread_c3_fu_211_p2() {
    c3_fu_211_p2 = (!i_op_assign_i_reg_133.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_op_assign_i_reg_133.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void kernel0_U_drain_IO_L3_out::thread_fifo_U_drain_local_in_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln764_reg_252.read()))) {
        fifo_U_drain_local_in_V_blk_n = fifo_U_drain_local_in_V_empty_n.read();
    } else {
        fifo_U_drain_local_in_V_blk_n = ap_const_logic_1;
    }
}

void kernel0_U_drain_IO_L3_out::thread_fifo_U_drain_local_in_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln764_reg_252.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        fifo_U_drain_local_in_V_read = ap_const_logic_1;
    } else {
        fifo_U_drain_local_in_V_read = ap_const_logic_0;
    }
}

void kernel0_U_drain_IO_L3_out::thread_icmp_ln759_fu_164_p2() {
    icmp_ln759_fu_164_p2 = (!p_0102_0_i_reg_111.read().is_01() || !ap_const_lv4_C.is_01())? sc_lv<1>(): sc_lv<1>(p_0102_0_i_reg_111.read() == ap_const_lv4_C);
}

void kernel0_U_drain_IO_L3_out::thread_icmp_ln764_fu_205_p2() {
    icmp_ln764_fu_205_p2 = (!i_op_assign_i_reg_133.read().is_01() || !indvars_iv_i_reg_99.read().is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_i_reg_133.read() == indvars_iv_i_reg_99.read());
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARADDR() {
    m_axi_U_ARADDR = ap_const_lv64_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARBURST() {
    m_axi_U_ARBURST = ap_const_lv2_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARCACHE() {
    m_axi_U_ARCACHE = ap_const_lv4_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARID() {
    m_axi_U_ARID = ap_const_lv1_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARLEN() {
    m_axi_U_ARLEN = ap_const_lv32_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARLOCK() {
    m_axi_U_ARLOCK = ap_const_lv2_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARPROT() {
    m_axi_U_ARPROT = ap_const_lv3_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARQOS() {
    m_axi_U_ARQOS = ap_const_lv4_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARREGION() {
    m_axi_U_ARREGION = ap_const_lv4_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARSIZE() {
    m_axi_U_ARSIZE = ap_const_lv3_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARUSER() {
    m_axi_U_ARUSER = ap_const_lv1_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_ARVALID() {
    m_axi_U_ARVALID = ap_const_logic_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWADDR() {
    m_axi_U_AWADDR = U_addr_reg_246.read();
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWBURST() {
    m_axi_U_AWBURST = ap_const_lv2_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWCACHE() {
    m_axi_U_AWCACHE = ap_const_lv4_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWID() {
    m_axi_U_AWID = ap_const_lv1_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWLEN() {
    m_axi_U_AWLEN = esl_zext<32,4>(ret_V_reg_241.read());
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWLOCK() {
    m_axi_U_AWLOCK = ap_const_lv2_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWPROT() {
    m_axi_U_AWPROT = ap_const_lv3_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWQOS() {
    m_axi_U_AWQOS = ap_const_lv4_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWREGION() {
    m_axi_U_AWREGION = ap_const_lv4_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWSIZE() {
    m_axi_U_AWSIZE = ap_const_lv3_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWUSER() {
    m_axi_U_AWUSER = ap_const_lv1_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(m_axi_U_AWREADY.read(), ap_const_logic_1))) {
        m_axi_U_AWVALID = ap_const_logic_1;
    } else {
        m_axi_U_AWVALID = ap_const_logic_0;
    }
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(m_axi_U_BVALID.read(), ap_const_logic_1))) {
        m_axi_U_BREADY = ap_const_logic_1;
    } else {
        m_axi_U_BREADY = ap_const_logic_0;
    }
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_RREADY() {
    m_axi_U_RREADY = ap_const_logic_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_WDATA() {
    m_axi_U_WDATA = tmp_2_reg_261.read();
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_WID() {
    m_axi_U_WID = ap_const_lv1_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_WLAST() {
    m_axi_U_WLAST = ap_const_logic_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_WSTRB() {
    m_axi_U_WSTRB = ap_const_lv4_F;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_WUSER() {
    m_axi_U_WUSER = ap_const_lv1_0;
}

void kernel0_U_drain_IO_L3_out::thread_m_axi_U_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln764_reg_252_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_U_WVALID = ap_const_logic_1;
    } else {
        m_axi_U_WVALID = ap_const_logic_0;
    }
}

void kernel0_U_drain_IO_L3_out::thread_ret_V_fu_176_p2() {
    ret_V_fu_176_p2 = (!ap_const_lv4_B.is_01() || !p_0102_0_i_reg_111.read().is_01())? sc_lv<4>(): (sc_bigint<4>(ap_const_lv4_B) - sc_biguint<4>(p_0102_0_i_reg_111.read()));
}

void kernel0_U_drain_IO_L3_out::thread_tmp_fu_144_p4() {
    tmp_fu_144_p4 = U_offset_dout.read().range(63, 2);
}

void kernel0_U_drain_IO_L3_out::thread_zext_ln752_cast_i_fu_154_p1() {
    zext_ln752_cast_i_fu_154_p1 = esl_zext<63,62>(tmp_fu_144_p4.read());
}

void kernel0_U_drain_IO_L3_out::thread_zext_ln769_1_fu_191_p1() {
    zext_ln769_1_fu_191_p1 = esl_zext<64,63>(add_ln769_fu_186_p2.read());
}

void kernel0_U_drain_IO_L3_out::thread_zext_ln769_fu_182_p1() {
    zext_ln769_fu_182_p1 = esl_zext<63,8>(phi_mul_i_reg_122.read());
}

void kernel0_U_drain_IO_L3_out::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, U_offset_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln759_fu_164_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(m_axi_U_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln764_fu_205_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln764_fu_205_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(m_axi_U_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

}

