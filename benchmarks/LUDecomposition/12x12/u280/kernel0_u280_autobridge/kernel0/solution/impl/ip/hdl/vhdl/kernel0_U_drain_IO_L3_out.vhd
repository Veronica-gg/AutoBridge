-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0_U_drain_IO_L3_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_U_AWVALID : OUT STD_LOGIC;
    m_axi_U_AWREADY : IN STD_LOGIC;
    m_axi_U_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_U_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_U_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_U_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_U_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_U_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_U_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_U_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_U_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_U_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_U_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_U_WVALID : OUT STD_LOGIC;
    m_axi_U_WREADY : IN STD_LOGIC;
    m_axi_U_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_U_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_U_WLAST : OUT STD_LOGIC;
    m_axi_U_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_U_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_U_ARVALID : OUT STD_LOGIC;
    m_axi_U_ARREADY : IN STD_LOGIC;
    m_axi_U_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_U_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_U_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_U_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_U_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_U_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_U_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_U_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_U_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_U_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_U_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_U_RVALID : IN STD_LOGIC;
    m_axi_U_RREADY : OUT STD_LOGIC;
    m_axi_U_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_U_RLAST : IN STD_LOGIC;
    m_axi_U_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_U_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_U_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_U_BVALID : IN STD_LOGIC;
    m_axi_U_BREADY : OUT STD_LOGIC;
    m_axi_U_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_U_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_U_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    U_offset_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    U_offset_empty_n : IN STD_LOGIC;
    U_offset_read : OUT STD_LOGIC;
    fifo_U_drain_local_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_U_drain_local_in_V_empty_n : IN STD_LOGIC;
    fifo_U_drain_local_in_V_read : OUT STD_LOGIC );
end;


architecture behav of kernel0_U_drain_IO_L3_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal U_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal U_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln764_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln764_reg_252_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal U_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal U_offset_blk_n : STD_LOGIC;
    signal fifo_U_drain_local_in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_op_assign_i_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln752_cast_i_fu_154_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln752_cast_i_reg_223 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal add_ln759_fu_158_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln759_reg_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c0_V_fu_170_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c0_V_reg_236 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_176_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_reg_241 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln759_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal U_addr_reg_246 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln764_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal c3_fu_211_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_2_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln759_1_fu_217_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln759_1_reg_266 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal indvars_iv_i_reg_99 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0102_0_i_reg_111 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_i_reg_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln769_1_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_144_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln769_fu_182_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln769_fu_186_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln759_fu_164_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((m_axi_U_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((m_axi_U_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_i_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_U_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_op_assign_i_reg_133 <= ap_const_lv4_0;
            elsif (((icmp_ln764_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_op_assign_i_reg_133 <= c3_fu_211_p2;
            end if; 
        end if;
    end process;

    indvars_iv_i_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = U_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv_i_reg_99 <= ap_const_lv4_C;
            elsif (((m_axi_U_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                indvars_iv_i_reg_99 <= add_ln759_1_reg_266;
            end if; 
        end if;
    end process;

    p_0102_0_i_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = U_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0102_0_i_reg_111 <= ap_const_lv4_0;
            elsif (((m_axi_U_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                p_0102_0_i_reg_111 <= c0_V_reg_236;
            end if; 
        end if;
    end process;

    phi_mul_i_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = U_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_i_reg_122 <= ap_const_lv8_0;
            elsif (((m_axi_U_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                phi_mul_i_reg_122 <= add_ln759_reg_228;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln759_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    U_addr_reg_246(62 downto 0) <= zext_ln769_1_fu_191_p1(62 downto 0);
                ret_V_reg_241 <= ret_V_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln759_1_reg_266 <= add_ln759_1_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln759_reg_228 <= add_ln759_fu_158_p2;
                c0_V_reg_236 <= c0_V_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln764_reg_252 <= icmp_ln764_fu_205_p2;
                icmp_ln764_reg_252_pp0_iter1_reg <= icmp_ln764_reg_252;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln764_reg_252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_reg_261 <= fifo_U_drain_local_in_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = U_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln752_cast_i_reg_223(61 downto 0) <= zext_ln752_cast_i_fu_154_p1(61 downto 0);
            end if;
        end if;
    end process;
    zext_ln752_cast_i_reg_223(62) <= '0';
    U_addr_reg_246(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_U_AWREADY, m_axi_U_BVALID, U_offset_empty_n, ap_CS_fsm_state3, ap_enable_reg_pp0_iter2, ap_CS_fsm_state11, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, icmp_ln759_fu_164_p2, icmp_ln764_fu_205_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = U_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln759_fu_164_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_U_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln764_fu_205_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln764_fu_205_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((m_axi_U_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    U_blk_n_AW_assign_proc : process(m_axi_U_AWREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            U_blk_n_AW <= m_axi_U_AWREADY;
        else 
            U_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    U_blk_n_B_assign_proc : process(m_axi_U_BVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            U_blk_n_B <= m_axi_U_BVALID;
        else 
            U_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    U_blk_n_W_assign_proc : process(m_axi_U_WREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln764_reg_252_pp0_iter1_reg)
    begin
        if (((icmp_ln764_reg_252_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            U_blk_n_W <= m_axi_U_WREADY;
        else 
            U_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    U_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, U_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            U_offset_blk_n <= U_offset_empty_n;
        else 
            U_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    U_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, U_offset_empty_n)
    begin
        if ((not(((ap_const_logic_0 = U_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            U_offset_read <= ap_const_logic_1;
        else 
            U_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln759_1_fu_217_p2 <= std_logic_vector(unsigned(indvars_iv_i_reg_99) + unsigned(ap_const_lv4_F));
    add_ln759_fu_158_p2 <= std_logic_vector(unsigned(phi_mul_i_reg_122) + unsigned(ap_const_lv8_D));
    add_ln769_fu_186_p2 <= std_logic_vector(unsigned(zext_ln752_cast_i_reg_223) + unsigned(zext_ln769_fu_182_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_U_drain_local_in_V_empty_n, icmp_ln764_reg_252, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln764_reg_252 = ap_const_lv1_0) and (fifo_U_drain_local_in_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_U_drain_local_in_V_empty_n, ap_enable_reg_pp0_iter2, icmp_ln764_reg_252, ap_enable_reg_pp0_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln764_reg_252 = ap_const_lv1_0) and (fifo_U_drain_local_in_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_U_drain_local_in_V_empty_n, ap_enable_reg_pp0_iter2, icmp_ln764_reg_252, ap_enable_reg_pp0_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln764_reg_252 = ap_const_lv1_0) and (fifo_U_drain_local_in_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, U_offset_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = U_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(fifo_U_drain_local_in_V_empty_n, icmp_ln764_reg_252)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((icmp_ln764_reg_252 = ap_const_lv1_0) and (fifo_U_drain_local_in_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(m_axi_U_WREADY, icmp_ln764_reg_252_pp0_iter1_reg)
    begin
                ap_block_state6_io <= ((icmp_ln764_reg_252_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_U_WREADY = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln764_fu_205_p2)
    begin
        if ((icmp_ln764_fu_205_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln759_fu_164_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln759_fu_164_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln759_fu_164_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln759_fu_164_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c0_V_fu_170_p2 <= std_logic_vector(unsigned(p_0102_0_i_reg_111) + unsigned(ap_const_lv4_1));
    c3_fu_211_p2 <= std_logic_vector(unsigned(i_op_assign_i_reg_133) + unsigned(ap_const_lv4_1));

    fifo_U_drain_local_in_V_blk_n_assign_proc : process(fifo_U_drain_local_in_V_empty_n, ap_block_pp0_stage0, icmp_ln764_reg_252, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln764_reg_252 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_U_drain_local_in_V_blk_n <= fifo_U_drain_local_in_V_empty_n;
        else 
            fifo_U_drain_local_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_U_drain_local_in_V_read_assign_proc : process(icmp_ln764_reg_252, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln764_reg_252 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_U_drain_local_in_V_read <= ap_const_logic_1;
        else 
            fifo_U_drain_local_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln759_fu_164_p2 <= "1" when (p_0102_0_i_reg_111 = ap_const_lv4_C) else "0";
    icmp_ln764_fu_205_p2 <= "1" when (i_op_assign_i_reg_133 = indvars_iv_i_reg_99) else "0";
    m_axi_U_ARADDR <= ap_const_lv64_0;
    m_axi_U_ARBURST <= ap_const_lv2_0;
    m_axi_U_ARCACHE <= ap_const_lv4_0;
    m_axi_U_ARID <= ap_const_lv1_0;
    m_axi_U_ARLEN <= ap_const_lv32_0;
    m_axi_U_ARLOCK <= ap_const_lv2_0;
    m_axi_U_ARPROT <= ap_const_lv3_0;
    m_axi_U_ARQOS <= ap_const_lv4_0;
    m_axi_U_ARREGION <= ap_const_lv4_0;
    m_axi_U_ARSIZE <= ap_const_lv3_0;
    m_axi_U_ARUSER <= ap_const_lv1_0;
    m_axi_U_ARVALID <= ap_const_logic_0;
    m_axi_U_AWADDR <= U_addr_reg_246;
    m_axi_U_AWBURST <= ap_const_lv2_0;
    m_axi_U_AWCACHE <= ap_const_lv4_0;
    m_axi_U_AWID <= ap_const_lv1_0;
    m_axi_U_AWLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_241),32));
    m_axi_U_AWLOCK <= ap_const_lv2_0;
    m_axi_U_AWPROT <= ap_const_lv3_0;
    m_axi_U_AWQOS <= ap_const_lv4_0;
    m_axi_U_AWREGION <= ap_const_lv4_0;
    m_axi_U_AWSIZE <= ap_const_lv3_0;
    m_axi_U_AWUSER <= ap_const_lv1_0;

    m_axi_U_AWVALID_assign_proc : process(m_axi_U_AWREADY, ap_CS_fsm_state3)
    begin
        if (((m_axi_U_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_U_AWVALID <= ap_const_logic_1;
        else 
            m_axi_U_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_U_BREADY_assign_proc : process(m_axi_U_BVALID, ap_CS_fsm_state11)
    begin
        if (((m_axi_U_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_U_BREADY <= ap_const_logic_1;
        else 
            m_axi_U_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_U_RREADY <= ap_const_logic_0;
    m_axi_U_WDATA <= tmp_2_reg_261;
    m_axi_U_WID <= ap_const_lv1_0;
    m_axi_U_WLAST <= ap_const_logic_0;
    m_axi_U_WSTRB <= ap_const_lv4_F;
    m_axi_U_WUSER <= ap_const_lv1_0;

    m_axi_U_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln764_reg_252_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln764_reg_252_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_U_WVALID <= ap_const_logic_1;
        else 
            m_axi_U_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_176_p2 <= std_logic_vector(signed(ap_const_lv4_B) - signed(p_0102_0_i_reg_111));
    tmp_fu_144_p4 <= U_offset_dout(63 downto 2);
    zext_ln752_cast_i_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_144_p4),63));
    zext_ln769_1_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln769_fu_186_p2),64));
    zext_ln769_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_i_reg_122),63));
end behav;
